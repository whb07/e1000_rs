/* automatically generated by rust-bindgen 0.59.1 */

pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 33;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const BITS_PER_BYTE: u32 = 8;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __ARG_PLACEHOLDER_1: u32 = 0;
pub const RB_RED: u32 = 0;
pub const RB_BLACK: u32 = 1;
pub const HRTIMER_STATE_ENQUEUED: u32 = 1;
pub const HRTIMER_STATE_INACTIVE: u32 = 0;
pub const MSEC_PER_SEC: u32 = 1000;
pub const USEC_PER_MSEC: u32 = 1000;
pub const NSEC_PER_USEC: u32 = 1000;
pub const NSEC_PER_MSEC: u32 = 1000000;
pub const USEC_PER_SEC: u32 = 1000000;
pub const NSEC_PER_SEC: u32 = 1000000000;
pub const FSEC_PER_SEC: u64 = 1000000000000000;
pub const GRO_HASH_BUCKETS: u32 = 8;


pub const E1000_HOST_IF_MAX_SIZE: u32 = 2048;
pub const E1000_SUCCESS: u32 = 0;
pub const E1000_ERR_EEPROM: u32 = 1;
pub const E1000_ERR_PHY: u32 = 2;
pub const E1000_ERR_CONFIG: u32 = 3;
pub const E1000_ERR_PARAM: u32 = 4;
pub const E1000_ERR_MAC_TYPE: u32 = 5;
pub const E1000_ERR_PHY_TYPE: u32 = 6;
pub const E1000_ERR_RESET: u32 = 9;
pub const E1000_ERR_MASTER_REQUESTS_PENDING: u32 = 10;
pub const E1000_ERR_HOST_INTERFACE_COMMAND: u32 = 11;
pub const E1000_BLK_PHY_RESET: u32 = 12;
pub const E1000_MNG_DHCP_TX_PAYLOAD_CMD: u32 = 64;
pub const E1000_HI_MAX_MNG_DATA_LENGTH: u32 = 1784;
pub const E1000_MNG_DHCP_COMMAND_TIMEOUT: u32 = 10;
pub const E1000_MNG_DHCP_COOKIE_OFFSET: u32 = 1776;
pub const E1000_MNG_DHCP_COOKIE_LENGTH: u32 = 16;
pub const E1000_MNG_IAMT_MODE: u32 = 3;
pub const E1000_MNG_ICH_IAMT_MODE: u32 = 2;
pub const E1000_IAMT_SIGNATURE: u32 = 1414349129;
pub const E1000_MNG_DHCP_COOKIE_STATUS_PARSING_SUPPORT: u32 = 1;
pub const E1000_MNG_DHCP_COOKIE_STATUS_VLAN_SUPPORT: u32 = 2;
pub const E1000_VFTA_ENTRY_SHIFT: u32 = 5;
pub const E1000_VFTA_ENTRY_MASK: u32 = 127;
pub const E1000_VFTA_ENTRY_BIT_SHIFT_MASK: u32 = 31;
pub const E1000_DEV_ID_82542: u32 = 4096;
pub const E1000_DEV_ID_82543GC_FIBER: u32 = 4097;
pub const E1000_DEV_ID_82543GC_COPPER: u32 = 4100;
pub const E1000_DEV_ID_82544EI_COPPER: u32 = 4104;
pub const E1000_DEV_ID_82544EI_FIBER: u32 = 4105;
pub const E1000_DEV_ID_82544GC_COPPER: u32 = 4108;
pub const E1000_DEV_ID_82544GC_LOM: u32 = 4109;
pub const E1000_DEV_ID_82540EM: u32 = 4110;
pub const E1000_DEV_ID_82540EM_LOM: u32 = 4117;
pub const E1000_DEV_ID_82540EP_LOM: u32 = 4118;
pub const E1000_DEV_ID_82540EP: u32 = 4119;
pub const E1000_DEV_ID_82540EP_LP: u32 = 4126;
pub const E1000_DEV_ID_82545EM_COPPER: u32 = 4111;
pub const E1000_DEV_ID_82545EM_FIBER: u32 = 4113;
pub const E1000_DEV_ID_82545GM_COPPER: u32 = 4134;
pub const E1000_DEV_ID_82545GM_FIBER: u32 = 4135;
pub const E1000_DEV_ID_82545GM_SERDES: u32 = 4136;
pub const E1000_DEV_ID_82546EB_COPPER: u32 = 4112;
pub const E1000_DEV_ID_82546EB_FIBER: u32 = 4114;
pub const E1000_DEV_ID_82546EB_QUAD_COPPER: u32 = 4125;
pub const E1000_DEV_ID_82541EI: u32 = 4115;
pub const E1000_DEV_ID_82541EI_MOBILE: u32 = 4120;
pub const E1000_DEV_ID_82541ER_LOM: u32 = 4116;
pub const E1000_DEV_ID_82541ER: u32 = 4216;
pub const E1000_DEV_ID_82547GI: u32 = 4213;
pub const E1000_DEV_ID_82541GI: u32 = 4214;
pub const E1000_DEV_ID_82541GI_MOBILE: u32 = 4215;
pub const E1000_DEV_ID_82541GI_LF: u32 = 4220;
pub const E1000_DEV_ID_82546GB_COPPER: u32 = 4217;
pub const E1000_DEV_ID_82546GB_FIBER: u32 = 4218;
pub const E1000_DEV_ID_82546GB_SERDES: u32 = 4219;
pub const E1000_DEV_ID_82546GB_PCIE: u32 = 4234;
pub const E1000_DEV_ID_82546GB_QUAD_COPPER: u32 = 4249;
pub const E1000_DEV_ID_82547EI: u32 = 4121;
pub const E1000_DEV_ID_82547EI_MOBILE: u32 = 4122;
pub const E1000_DEV_ID_82546GB_QUAD_COPPER_KSP3: u32 = 4277;
pub const E1000_DEV_ID_INTEL_CE4100_GBE: u32 = 11886;
pub const NODE_ADDRESS_SIZE: u32 = 6;
pub const MAC_DECODE_SIZE: u32 = 131072;
pub const E1000_82542_2_0_REV_ID: u32 = 2;
pub const E1000_82542_2_1_REV_ID: u32 = 3;
pub const E1000_REVISION_0: u32 = 0;
pub const E1000_REVISION_1: u32 = 1;
pub const E1000_REVISION_2: u32 = 2;
pub const E1000_REVISION_3: u32 = 3;
pub const SPEED_10: u32 = 10;
pub const SPEED_100: u32 = 100;
pub const SPEED_1000: u32 = 1000;
pub const HALF_DUPLEX: u32 = 1;
pub const FULL_DUPLEX: u32 = 2;
pub const ENET_HEADER_SIZE: u32 = 14;
pub const MINIMUM_ETHERNET_FRAME_SIZE: u32 = 64;
pub const ETHERNET_FCS_SIZE: u32 = 4;
pub const MINIMUM_ETHERNET_PACKET_SIZE: u32 = 60;
pub const CRC_LENGTH: u32 = 4;
pub const MAX_JUMBO_FRAME_SIZE: u32 = 16128;
pub const VLAN_TAG_SIZE: u32 = 4;
pub const ETHERNET_IEEE_VLAN_TYPE: u32 = 33024;
pub const ETHERNET_IP_TYPE: u32 = 2048;
pub const ETHERNET_ARP_TYPE: u32 = 2054;
pub const IP_PROTOCOL_TCP: u32 = 6;
pub const IP_PROTOCOL_UDP: u32 = 17;
pub const E1000_RAR_ENTRIES: u32 = 15;
pub const MIN_NUMBER_OF_DESCRIPTORS: u32 = 8;
pub const MAX_NUMBER_OF_DESCRIPTORS: u32 = 65528;
pub const MAX_PS_BUFFERS: u32 = 4;
pub const E1000_RXD_STAT_DD: u32 = 1;
pub const E1000_RXD_STAT_EOP: u32 = 2;
pub const E1000_RXD_STAT_IXSM: u32 = 4;
pub const E1000_RXD_STAT_VP: u32 = 8;
pub const E1000_RXD_STAT_UDPCS: u32 = 16;
pub const E1000_RXD_STAT_TCPCS: u32 = 32;
pub const E1000_RXD_STAT_IPCS: u32 = 64;
pub const E1000_RXD_STAT_PIF: u32 = 128;
pub const E1000_RXD_STAT_IPIDV: u32 = 512;
pub const E1000_RXD_STAT_UDPV: u32 = 1024;
pub const E1000_RXD_STAT_ACK: u32 = 32768;
pub const E1000_RXD_ERR_CE: u32 = 1;
pub const E1000_RXD_ERR_SE: u32 = 2;
pub const E1000_RXD_ERR_SEQ: u32 = 4;
pub const E1000_RXD_ERR_CXE: u32 = 16;
pub const E1000_RXD_ERR_TCPE: u32 = 32;
pub const E1000_RXD_ERR_IPE: u32 = 64;
pub const E1000_RXD_ERR_RXE: u32 = 128;
pub const E1000_RXD_SPC_VLAN_MASK: u32 = 4095;
pub const E1000_RXD_SPC_PRI_MASK: u32 = 57344;
pub const E1000_RXD_SPC_PRI_SHIFT: u32 = 13;
pub const E1000_RXD_SPC_CFI_MASK: u32 = 4096;
pub const E1000_RXD_SPC_CFI_SHIFT: u32 = 12;
pub const E1000_RXDEXT_STATERR_CE: u32 = 16777216;
pub const E1000_RXDEXT_STATERR_SE: u32 = 33554432;
pub const E1000_RXDEXT_STATERR_SEQ: u32 = 67108864;
pub const E1000_RXDEXT_STATERR_CXE: u32 = 268435456;
pub const E1000_RXDEXT_STATERR_TCPE: u32 = 536870912;
pub const E1000_RXDEXT_STATERR_IPE: u32 = 1073741824;
pub const E1000_RXDEXT_STATERR_RXE: u32 = 2147483648;
pub const E1000_RXDPS_HDRSTAT_HDRSP: u32 = 32768;
pub const E1000_RXDPS_HDRSTAT_HDRLEN_MASK: u32 = 1023;
pub const E1000_RXD_ERR_FRAME_ERR_MASK: u32 = 151;
pub const E1000_RXDEXT_ERR_FRAME_ERR_MASK: u32 = 2533359616;
pub const E1000_TXD_DTYP_D: u32 = 1048576;
pub const E1000_TXD_DTYP_C: u32 = 0;
pub const E1000_TXD_POPTS_IXSM: u32 = 1;
pub const E1000_TXD_POPTS_TXSM: u32 = 2;
pub const E1000_TXD_CMD_EOP: u32 = 16777216;
pub const E1000_TXD_CMD_IFCS: u32 = 33554432;
pub const E1000_TXD_CMD_IC: u32 = 67108864;
pub const E1000_TXD_CMD_RS: u32 = 134217728;
pub const E1000_TXD_CMD_RPS: u32 = 268435456;
pub const E1000_TXD_CMD_DEXT: u32 = 536870912;
pub const E1000_TXD_CMD_VLE: u32 = 1073741824;
pub const E1000_TXD_CMD_IDE: u32 = 2147483648;
pub const E1000_TXD_STAT_DD: u32 = 1;
pub const E1000_TXD_STAT_EC: u32 = 2;
pub const E1000_TXD_STAT_LC: u32 = 4;
pub const E1000_TXD_STAT_TU: u32 = 8;
pub const E1000_TXD_CMD_TCP: u32 = 16777216;
pub const E1000_TXD_CMD_IP: u32 = 33554432;
pub const E1000_TXD_CMD_TSE: u32 = 67108864;
pub const E1000_TXD_STAT_TC: u32 = 4;
pub const E1000_NUM_UNICAST: u32 = 16;
pub const E1000_MC_TBL_SIZE: u32 = 128;
pub const E1000_VLAN_FILTER_TBL_SIZE: u32 = 128;
pub const E1000_NUM_MTA_REGISTERS: u32 = 128;
pub const E1000_WAKEUP_IP_ADDRESS_COUNT_MAX: u32 = 4;
pub const E1000_IP4AT_SIZE: u32 = 4;
pub const E1000_IP6AT_SIZE: u32 = 1;
pub const E1000_FLEXIBLE_FILTER_COUNT_MAX: u32 = 4;
pub const E1000_FLEXIBLE_FILTER_SIZE_MAX: u32 = 128;
pub const E1000_FFLT_SIZE: u32 = 4;
pub const E1000_FFMT_SIZE: u32 = 128;
pub const E1000_FFVT_SIZE: u32 = 128;
pub const E1000_DISABLE_SERDES_LOOPBACK: u32 = 1024;
pub const E1000_CTRL: u32 = 0;
pub const E1000_CTRL_DUP: u32 = 4;
pub const E1000_STATUS: u32 = 8;
pub const E1000_EECD: u32 = 16;
pub const E1000_EERD: u32 = 20;
pub const E1000_CTRL_EXT: u32 = 24;
pub const E1000_FLA: u32 = 28;
pub const E1000_MDIC: u32 = 32;
pub const E1000_SCTL: u32 = 36;
pub const E1000_FEXTNVM: u32 = 40;
pub const E1000_FCAL: u32 = 40;
pub const E1000_FCAH: u32 = 44;
pub const E1000_FCT: u32 = 48;
pub const E1000_VET: u32 = 56;
pub const E1000_ICR: u32 = 192;
pub const E1000_ITR: u32 = 196;
pub const E1000_ICS: u32 = 200;
pub const E1000_IMS: u32 = 208;
pub const E1000_IMC: u32 = 216;
pub const E1000_IAM: u32 = 224;
pub const E1000_CTL_AUX: u32 = 224;
pub const E1000_CTL_AUX_END_SEL_SHIFT: u32 = 10;
pub const E1000_CTL_AUX_ENDIANESS_SHIFT: u32 = 8;
pub const E1000_CTL_AUX_RGMII_RMII_SHIFT: u32 = 0;
pub const E1000_CTL_AUX_DES_PKT: u32 = 0;
pub const E1000_CTL_AUX_DES: u32 = 1024;
pub const E1000_CTL_AUX_PKT: u32 = 2048;
pub const E1000_CTL_AUX_ALL: u32 = 3072;
pub const E1000_CTL_AUX_RGMII: u32 = 0;
pub const E1000_CTL_AUX_RMII: u32 = 1;
pub const E1000_CTL_AUX_LWLE_BBE: u32 = 0;
pub const E1000_CTL_AUX_LWLE_BLE: u32 = 256;
pub const E1000_CTL_AUX_LWBE_BBE: u32 = 512;
pub const E1000_CTL_AUX_LWBE_BLE: u32 = 768;
pub const E1000_RCTL: u32 = 256;
pub const E1000_RDTR1: u32 = 10272;
pub const E1000_RDBAL1: u32 = 10496;
pub const E1000_RDBAH1: u32 = 10500;
pub const E1000_RDLEN1: u32 = 10504;
pub const E1000_RDH1: u32 = 10512;
pub const E1000_RDT1: u32 = 10520;
pub const E1000_FCTTV: u32 = 368;
pub const E1000_TXCW: u32 = 376;
pub const E1000_RXCW: u32 = 384;
pub const E1000_TCTL: u32 = 1024;
pub const E1000_TCTL_EXT: u32 = 1028;
pub const E1000_TIPG: u32 = 1040;
pub const E1000_TBT: u32 = 1096;
pub const E1000_AIT: u32 = 1112;
pub const E1000_LEDCTL: u32 = 3584;
pub const E1000_EXTCNF_CTRL: u32 = 3840;
pub const E1000_EXTCNF_SIZE: u32 = 3848;
pub const E1000_PHY_CTRL: u32 = 3856;
pub const FEXTNVM_SW_CONFIG: u32 = 1;
pub const E1000_PBA: u32 = 4096;
pub const E1000_PBS: u32 = 4104;
pub const E1000_EEMNGCTL: u32 = 4112;
pub const E1000_FLASH_UPDATES: u32 = 1000;
pub const E1000_EEARBC: u32 = 4132;
pub const E1000_FLASHT: u32 = 4136;
pub const E1000_EEWR: u32 = 4140;
pub const E1000_FLSWCTL: u32 = 4144;
pub const E1000_FLSWDATA: u32 = 4148;
pub const E1000_FLSWCNT: u32 = 4152;
pub const E1000_FLOP: u32 = 4156;
pub const E1000_ERT: u32 = 8200;
pub const E1000_FCRTL: u32 = 8544;
pub const E1000_FCRTH: u32 = 8552;
pub const E1000_PSRCTL: u32 = 8560;
pub const E1000_RDFH: u32 = 9232;
pub const E1000_RDFT: u32 = 9240;
pub const E1000_RDFHS: u32 = 9248;
pub const E1000_RDFTS: u32 = 9256;
pub const E1000_RDFPC: u32 = 9264;
pub const E1000_RDBAL: u32 = 10240;
pub const E1000_RDBAH: u32 = 10244;
pub const E1000_RDLEN: u32 = 10248;
pub const E1000_RDH: u32 = 10256;
pub const E1000_RDT: u32 = 10264;
pub const E1000_RDTR: u32 = 10272;
pub const E1000_RDBAL0: u32 = 10240;
pub const E1000_RDBAH0: u32 = 10244;
pub const E1000_RDLEN0: u32 = 10248;
pub const E1000_RDH0: u32 = 10256;
pub const E1000_RDT0: u32 = 10264;
pub const E1000_RDTR0: u32 = 10272;
pub const E1000_RXDCTL: u32 = 10280;
pub const E1000_RXDCTL1: u32 = 10536;
pub const E1000_RADV: u32 = 10284;
pub const E1000_RSRPD: u32 = 11264;
pub const E1000_RAID: u32 = 11272;
pub const E1000_TXDMAC: u32 = 12288;
pub const E1000_KABGTXD: u32 = 12292;
pub const E1000_TDFH: u32 = 13328;
pub const E1000_TDFT: u32 = 13336;
pub const E1000_TDFHS: u32 = 13344;
pub const E1000_TDFTS: u32 = 13352;
pub const E1000_TDFPC: u32 = 13360;
pub const E1000_TDBAL: u32 = 14336;
pub const E1000_TDBAH: u32 = 14340;
pub const E1000_TDLEN: u32 = 14344;
pub const E1000_TDH: u32 = 14352;
pub const E1000_TDT: u32 = 14360;
pub const E1000_TIDV: u32 = 14368;
pub const E1000_TXDCTL: u32 = 14376;
pub const E1000_TADV: u32 = 14380;
pub const E1000_TSPMT: u32 = 14384;
pub const E1000_TARC0: u32 = 14400;
pub const E1000_TDBAL1: u32 = 14592;
pub const E1000_TDBAH1: u32 = 14596;
pub const E1000_TDLEN1: u32 = 14600;
pub const E1000_TDH1: u32 = 14608;
pub const E1000_TDT1: u32 = 14616;
pub const E1000_TXDCTL1: u32 = 14632;
pub const E1000_TARC1: u32 = 14656;
pub const E1000_CRCERRS: u32 = 16384;
pub const E1000_ALGNERRC: u32 = 16388;
pub const E1000_SYMERRS: u32 = 16392;
pub const E1000_RXERRC: u32 = 16396;
pub const E1000_MPC: u32 = 16400;
pub const E1000_SCC: u32 = 16404;
pub const E1000_ECOL: u32 = 16408;
pub const E1000_MCC: u32 = 16412;
pub const E1000_LATECOL: u32 = 16416;
pub const E1000_COLC: u32 = 16424;
pub const E1000_DC: u32 = 16432;
pub const E1000_TNCRS: u32 = 16436;
pub const E1000_SEC: u32 = 16440;
pub const E1000_CEXTERR: u32 = 16444;
pub const E1000_RLEC: u32 = 16448;
pub const E1000_XONRXC: u32 = 16456;
pub const E1000_XONTXC: u32 = 16460;
pub const E1000_XOFFRXC: u32 = 16464;
pub const E1000_XOFFTXC: u32 = 16468;
pub const E1000_FCRUC: u32 = 16472;
pub const E1000_PRC64: u32 = 16476;
pub const E1000_PRC127: u32 = 16480;
pub const E1000_PRC255: u32 = 16484;
pub const E1000_PRC511: u32 = 16488;
pub const E1000_PRC1023: u32 = 16492;
pub const E1000_PRC1522: u32 = 16496;
pub const E1000_GPRC: u32 = 16500;
pub const E1000_BPRC: u32 = 16504;
pub const E1000_MPRC: u32 = 16508;
pub const E1000_GPTC: u32 = 16512;
pub const E1000_GORCL: u32 = 16520;
pub const E1000_GORCH: u32 = 16524;
pub const E1000_GOTCL: u32 = 16528;
pub const E1000_GOTCH: u32 = 16532;
pub const E1000_RNBC: u32 = 16544;
pub const E1000_RUC: u32 = 16548;
pub const E1000_RFC: u32 = 16552;
pub const E1000_ROC: u32 = 16556;
pub const E1000_RJC: u32 = 16560;
pub const E1000_MGTPRC: u32 = 16564;
pub const E1000_MGTPDC: u32 = 16568;
pub const E1000_MGTPTC: u32 = 16572;
pub const E1000_TORL: u32 = 16576;
pub const E1000_TORH: u32 = 16580;
pub const E1000_TOTL: u32 = 16584;
pub const E1000_TOTH: u32 = 16588;
pub const E1000_TPR: u32 = 16592;
pub const E1000_TPT: u32 = 16596;
pub const E1000_PTC64: u32 = 16600;
pub const E1000_PTC127: u32 = 16604;
pub const E1000_PTC255: u32 = 16608;
pub const E1000_PTC511: u32 = 16612;
pub const E1000_PTC1023: u32 = 16616;
pub const E1000_PTC1522: u32 = 16620;
pub const E1000_MPTC: u32 = 16624;
pub const E1000_BPTC: u32 = 16628;
pub const E1000_TSCTC: u32 = 16632;
pub const E1000_TSCTFC: u32 = 16636;
pub const E1000_IAC: u32 = 16640;
pub const E1000_ICRXPTC: u32 = 16644;
pub const E1000_ICRXATC: u32 = 16648;
pub const E1000_ICTXPTC: u32 = 16652;
pub const E1000_ICTXATC: u32 = 16656;
pub const E1000_ICTXQEC: u32 = 16664;
pub const E1000_ICTXQMTC: u32 = 16668;
pub const E1000_ICRXDMTC: u32 = 16672;
pub const E1000_ICRXOC: u32 = 16676;
pub const E1000_RXCSUM: u32 = 20480;
pub const E1000_RFCTL: u32 = 20488;
pub const E1000_MTA: u32 = 20992;
pub const E1000_RA: u32 = 21504;
pub const E1000_VFTA: u32 = 22016;
pub const E1000_WUC: u32 = 22528;
pub const E1000_WUFC: u32 = 22536;
pub const E1000_WUS: u32 = 22544;
pub const E1000_MANC: u32 = 22560;
pub const E1000_IPAV: u32 = 22584;
pub const E1000_IP4AT: u32 = 22592;
pub const E1000_IP6AT: u32 = 22656;
pub const E1000_WUPL: u32 = 22784;
pub const E1000_WUPM: u32 = 23040;
pub const E1000_FFLT: u32 = 24320;
pub const E1000_HOST_IF: u32 = 34816;
pub const E1000_FFMT: u32 = 36864;
pub const E1000_FFVT: u32 = 38912;
pub const E1000_KUMCTRLSTA: u32 = 52;
pub const E1000_MDPHYA: u32 = 60;
pub const E1000_MANC2H: u32 = 22624;
pub const E1000_SW_FW_SYNC: u32 = 23388;
pub const E1000_GCR: u32 = 23296;
pub const E1000_GSCL_1: u32 = 23312;
pub const E1000_GSCL_2: u32 = 23316;
pub const E1000_GSCL_3: u32 = 23320;
pub const E1000_GSCL_4: u32 = 23324;
pub const E1000_FACTPS: u32 = 23344;
pub const E1000_SWSM: u32 = 23376;
pub const E1000_FWSM: u32 = 23380;
pub const E1000_FFLT_DBG: u32 = 24324;
pub const E1000_HICR: u32 = 36608;
pub const E1000_CPUVEC: u32 = 11280;
pub const E1000_MRQC: u32 = 22552;
pub const E1000_RETA: u32 = 23552;
pub const E1000_RSSRK: u32 = 23680;
pub const E1000_RSSIM: u32 = 22628;
pub const E1000_RSSIR: u32 = 22632;
pub const E1000_82542_CTL_AUX: u32 = 224;
pub const E1000_82542_CTRL: u32 = 0;
pub const E1000_82542_CTRL_DUP: u32 = 4;
pub const E1000_82542_STATUS: u32 = 8;
pub const E1000_82542_EECD: u32 = 16;
pub const E1000_82542_EERD: u32 = 20;
pub const E1000_82542_CTRL_EXT: u32 = 24;
pub const E1000_82542_FLA: u32 = 28;
pub const E1000_82542_MDIC: u32 = 32;
pub const E1000_82542_SCTL: u32 = 36;
pub const E1000_82542_FEXTNVM: u32 = 40;
pub const E1000_82542_FCAL: u32 = 40;
pub const E1000_82542_FCAH: u32 = 44;
pub const E1000_82542_FCT: u32 = 48;
pub const E1000_82542_VET: u32 = 56;
pub const E1000_82542_RA: u32 = 64;
pub const E1000_82542_ICR: u32 = 192;
pub const E1000_82542_ITR: u32 = 196;
pub const E1000_82542_ICS: u32 = 200;
pub const E1000_82542_IMS: u32 = 208;
pub const E1000_82542_IMC: u32 = 216;
pub const E1000_82542_RCTL: u32 = 256;
pub const E1000_82542_RDTR: u32 = 264;
pub const E1000_82542_RDFH: u32 = 9232;
pub const E1000_82542_RDFT: u32 = 9240;
pub const E1000_82542_RDFHS: u32 = 9248;
pub const E1000_82542_RDFTS: u32 = 9256;
pub const E1000_82542_RDFPC: u32 = 9264;
pub const E1000_82542_RDBAL: u32 = 272;
pub const E1000_82542_RDBAH: u32 = 276;
pub const E1000_82542_RDLEN: u32 = 280;
pub const E1000_82542_RDH: u32 = 288;
pub const E1000_82542_RDT: u32 = 296;
pub const E1000_82542_RDTR0: u32 = 264;
pub const E1000_82542_RDBAL0: u32 = 272;
pub const E1000_82542_RDBAH0: u32 = 276;
pub const E1000_82542_RDLEN0: u32 = 280;
pub const E1000_82542_RDH0: u32 = 288;
pub const E1000_82542_RDT0: u32 = 296;
pub const E1000_82542_RDBAH3: u32 = 11012;
pub const E1000_82542_RDBAL3: u32 = 11008;
pub const E1000_82542_RDLEN3: u32 = 11016;
pub const E1000_82542_RDH3: u32 = 11024;
pub const E1000_82542_RDT3: u32 = 11032;
pub const E1000_82542_RDBAL2: u32 = 10752;
pub const E1000_82542_RDBAH2: u32 = 10756;
pub const E1000_82542_RDLEN2: u32 = 10760;
pub const E1000_82542_RDH2: u32 = 10768;
pub const E1000_82542_RDT2: u32 = 10776;
pub const E1000_82542_RDTR1: u32 = 304;
pub const E1000_82542_RDBAL1: u32 = 312;
pub const E1000_82542_RDBAH1: u32 = 316;
pub const E1000_82542_RDLEN1: u32 = 320;
pub const E1000_82542_RDH1: u32 = 328;
pub const E1000_82542_RDT1: u32 = 336;
pub const E1000_82542_FCRTH: u32 = 352;
pub const E1000_82542_FCRTL: u32 = 360;
pub const E1000_82542_FCTTV: u32 = 368;
pub const E1000_82542_TXCW: u32 = 376;
pub const E1000_82542_RXCW: u32 = 384;
pub const E1000_82542_MTA: u32 = 512;
pub const E1000_82542_TCTL: u32 = 1024;
pub const E1000_82542_TCTL_EXT: u32 = 1028;
pub const E1000_82542_TIPG: u32 = 1040;
pub const E1000_82542_TDBAL: u32 = 1056;
pub const E1000_82542_TDBAH: u32 = 1060;
pub const E1000_82542_TDLEN: u32 = 1064;
pub const E1000_82542_TDH: u32 = 1072;
pub const E1000_82542_TDT: u32 = 1080;
pub const E1000_82542_TIDV: u32 = 1088;
pub const E1000_82542_TBT: u32 = 1096;
pub const E1000_82542_AIT: u32 = 1112;
pub const E1000_82542_VFTA: u32 = 1536;
pub const E1000_82542_LEDCTL: u32 = 3584;
pub const E1000_82542_PBA: u32 = 4096;
pub const E1000_82542_PBS: u32 = 4104;
pub const E1000_82542_EEMNGCTL: u32 = 4112;
pub const E1000_82542_EEARBC: u32 = 4132;
pub const E1000_82542_FLASHT: u32 = 4136;
pub const E1000_82542_EEWR: u32 = 4140;
pub const E1000_82542_FLSWCTL: u32 = 4144;
pub const E1000_82542_FLSWDATA: u32 = 4148;
pub const E1000_82542_FLSWCNT: u32 = 4152;
pub const E1000_82542_FLOP: u32 = 4156;
pub const E1000_82542_EXTCNF_CTRL: u32 = 3840;
pub const E1000_82542_EXTCNF_SIZE: u32 = 3848;
pub const E1000_82542_PHY_CTRL: u32 = 3856;
pub const E1000_82542_ERT: u32 = 8200;
pub const E1000_82542_RXDCTL: u32 = 10280;
pub const E1000_82542_RXDCTL1: u32 = 10536;
pub const E1000_82542_RADV: u32 = 10284;
pub const E1000_82542_RSRPD: u32 = 11264;
pub const E1000_82542_TXDMAC: u32 = 12288;
pub const E1000_82542_KABGTXD: u32 = 12292;
pub const E1000_82542_TDFHS: u32 = 13344;
pub const E1000_82542_TDFTS: u32 = 13352;
pub const E1000_82542_TDFPC: u32 = 13360;
pub const E1000_82542_TXDCTL: u32 = 14376;
pub const E1000_82542_TADV: u32 = 14380;
pub const E1000_82542_TSPMT: u32 = 14384;
pub const E1000_82542_CRCERRS: u32 = 16384;
pub const E1000_82542_ALGNERRC: u32 = 16388;
pub const E1000_82542_SYMERRS: u32 = 16392;
pub const E1000_82542_RXERRC: u32 = 16396;
pub const E1000_82542_MPC: u32 = 16400;
pub const E1000_82542_SCC: u32 = 16404;
pub const E1000_82542_ECOL: u32 = 16408;
pub const E1000_82542_MCC: u32 = 16412;
pub const E1000_82542_LATECOL: u32 = 16416;
pub const E1000_82542_COLC: u32 = 16424;
pub const E1000_82542_DC: u32 = 16432;
pub const E1000_82542_TNCRS: u32 = 16436;
pub const E1000_82542_SEC: u32 = 16440;
pub const E1000_82542_CEXTERR: u32 = 16444;
pub const E1000_82542_RLEC: u32 = 16448;
pub const E1000_82542_XONRXC: u32 = 16456;
pub const E1000_82542_XONTXC: u32 = 16460;
pub const E1000_82542_XOFFRXC: u32 = 16464;
pub const E1000_82542_XOFFTXC: u32 = 16468;
pub const E1000_82542_FCRUC: u32 = 16472;
pub const E1000_82542_PRC64: u32 = 16476;
pub const E1000_82542_PRC127: u32 = 16480;
pub const E1000_82542_PRC255: u32 = 16484;
pub const E1000_82542_PRC511: u32 = 16488;
pub const E1000_82542_PRC1023: u32 = 16492;
pub const E1000_82542_PRC1522: u32 = 16496;
pub const E1000_82542_GPRC: u32 = 16500;
pub const E1000_82542_BPRC: u32 = 16504;
pub const E1000_82542_MPRC: u32 = 16508;
pub const E1000_82542_GPTC: u32 = 16512;
pub const E1000_82542_GORCL: u32 = 16520;
pub const E1000_82542_GORCH: u32 = 16524;
pub const E1000_82542_GOTCL: u32 = 16528;
pub const E1000_82542_GOTCH: u32 = 16532;
pub const E1000_82542_RNBC: u32 = 16544;
pub const E1000_82542_RUC: u32 = 16548;
pub const E1000_82542_RFC: u32 = 16552;
pub const E1000_82542_ROC: u32 = 16556;
pub const E1000_82542_RJC: u32 = 16560;
pub const E1000_82542_MGTPRC: u32 = 16564;
pub const E1000_82542_MGTPDC: u32 = 16568;
pub const E1000_82542_MGTPTC: u32 = 16572;
pub const E1000_82542_TORL: u32 = 16576;
pub const E1000_82542_TORH: u32 = 16580;
pub const E1000_82542_TOTL: u32 = 16584;
pub const E1000_82542_TOTH: u32 = 16588;
pub const E1000_82542_TPR: u32 = 16592;
pub const E1000_82542_TPT: u32 = 16596;
pub const E1000_82542_PTC64: u32 = 16600;
pub const E1000_82542_PTC127: u32 = 16604;
pub const E1000_82542_PTC255: u32 = 16608;
pub const E1000_82542_PTC511: u32 = 16612;
pub const E1000_82542_PTC1023: u32 = 16616;
pub const E1000_82542_PTC1522: u32 = 16620;
pub const E1000_82542_MPTC: u32 = 16624;
pub const E1000_82542_BPTC: u32 = 16628;
pub const E1000_82542_TSCTC: u32 = 16632;
pub const E1000_82542_TSCTFC: u32 = 16636;
pub const E1000_82542_RXCSUM: u32 = 20480;
pub const E1000_82542_WUC: u32 = 22528;
pub const E1000_82542_WUFC: u32 = 22536;
pub const E1000_82542_WUS: u32 = 22544;
pub const E1000_82542_MANC: u32 = 22560;
pub const E1000_82542_IPAV: u32 = 22584;
pub const E1000_82542_IP4AT: u32 = 22592;
pub const E1000_82542_IP6AT: u32 = 22656;
pub const E1000_82542_WUPL: u32 = 22784;
pub const E1000_82542_WUPM: u32 = 23040;
pub const E1000_82542_FFLT: u32 = 24320;
pub const E1000_82542_TDFH: u32 = 32784;
pub const E1000_82542_TDFT: u32 = 32792;
pub const E1000_82542_FFMT: u32 = 36864;
pub const E1000_82542_FFVT: u32 = 38912;
pub const E1000_82542_HOST_IF: u32 = 34816;
pub const E1000_82542_IAM: u32 = 224;
pub const E1000_82542_PSRCTL: u32 = 8560;
pub const E1000_82542_RAID: u32 = 11272;
pub const E1000_82542_TARC0: u32 = 14400;
pub const E1000_82542_TDBAL1: u32 = 14592;
pub const E1000_82542_TDBAH1: u32 = 14596;
pub const E1000_82542_TDLEN1: u32 = 14600;
pub const E1000_82542_TDH1: u32 = 14608;
pub const E1000_82542_TDT1: u32 = 14616;
pub const E1000_82542_TXDCTL1: u32 = 14632;
pub const E1000_82542_TARC1: u32 = 14656;
pub const E1000_82542_RFCTL: u32 = 20488;
pub const E1000_82542_GCR: u32 = 23296;
pub const E1000_82542_GSCL_1: u32 = 23312;
pub const E1000_82542_GSCL_2: u32 = 23316;
pub const E1000_82542_GSCL_3: u32 = 23320;
pub const E1000_82542_GSCL_4: u32 = 23324;
pub const E1000_82542_FACTPS: u32 = 23344;
pub const E1000_82542_SWSM: u32 = 23376;
pub const E1000_82542_FWSM: u32 = 23380;
pub const E1000_82542_FFLT_DBG: u32 = 24324;
pub const E1000_82542_IAC: u32 = 16640;
pub const E1000_82542_ICRXPTC: u32 = 16644;
pub const E1000_82542_ICRXATC: u32 = 16648;
pub const E1000_82542_ICTXPTC: u32 = 16652;
pub const E1000_82542_ICTXATC: u32 = 16656;
pub const E1000_82542_ICTXQEC: u32 = 16664;
pub const E1000_82542_ICTXQMTC: u32 = 16668;
pub const E1000_82542_ICRXDMTC: u32 = 16672;
pub const E1000_82542_ICRXOC: u32 = 16676;
pub const E1000_82542_HICR: u32 = 36608;
pub const E1000_82542_CPUVEC: u32 = 11280;
pub const E1000_82542_MRQC: u32 = 22552;
pub const E1000_82542_RETA: u32 = 23552;
pub const E1000_82542_RSSRK: u32 = 23680;
pub const E1000_82542_RSSIM: u32 = 22628;
pub const E1000_82542_RSSIR: u32 = 22632;
pub const E1000_82542_KUMCTRLSTA: u32 = 52;
pub const E1000_82542_SW_FW_SYNC: u32 = 23388;
pub const E1000_EEPROM_SWDPIN0: u32 = 1;
pub const E1000_EEPROM_LED_LOGIC: u32 = 32;
pub const E1000_EEPROM_RW_REG_DATA: u32 = 16;
pub const E1000_EEPROM_RW_REG_DONE: u32 = 2;
pub const E1000_EEPROM_RW_REG_START: u32 = 1;
pub const E1000_EEPROM_RW_ADDR_SHIFT: u32 = 2;
pub const E1000_EEPROM_POLL_WRITE: u32 = 1;
pub const E1000_EEPROM_POLL_READ: u32 = 0;
pub const E1000_CTRL_FD: u32 = 1;
pub const E1000_CTRL_BEM: u32 = 2;
pub const E1000_CTRL_PRIOR: u32 = 4;
pub const E1000_CTRL_GIO_MASTER_DISABLE: u32 = 4;
pub const E1000_CTRL_LRST: u32 = 8;
pub const E1000_CTRL_TME: u32 = 16;
pub const E1000_CTRL_SLE: u32 = 32;
pub const E1000_CTRL_ASDE: u32 = 32;
pub const E1000_CTRL_SLU: u32 = 64;
pub const E1000_CTRL_ILOS: u32 = 128;
pub const E1000_CTRL_SPD_SEL: u32 = 768;
pub const E1000_CTRL_SPD_10: u32 = 0;
pub const E1000_CTRL_SPD_100: u32 = 256;
pub const E1000_CTRL_SPD_1000: u32 = 512;
pub const E1000_CTRL_BEM32: u32 = 1024;
pub const E1000_CTRL_FRCSPD: u32 = 2048;
pub const E1000_CTRL_FRCDPX: u32 = 4096;
pub const E1000_CTRL_D_UD_EN: u32 = 8192;
pub const E1000_CTRL_D_UD_POLARITY: u32 = 16384;
pub const E1000_CTRL_FORCE_PHY_RESET: u32 = 32768;
pub const E1000_CTRL_EXT_LINK_EN: u32 = 65536;
pub const E1000_CTRL_SWDPIN0: u32 = 262144;
pub const E1000_CTRL_SWDPIN1: u32 = 524288;
pub const E1000_CTRL_SWDPIN2: u32 = 1048576;
pub const E1000_CTRL_SWDPIN3: u32 = 2097152;
pub const E1000_CTRL_SWDPIO0: u32 = 4194304;
pub const E1000_CTRL_SWDPIO1: u32 = 8388608;
pub const E1000_CTRL_SWDPIO2: u32 = 16777216;
pub const E1000_CTRL_SWDPIO3: u32 = 33554432;
pub const E1000_CTRL_RST: u32 = 67108864;
pub const E1000_CTRL_RFCE: u32 = 134217728;
pub const E1000_CTRL_TFCE: u32 = 268435456;
pub const E1000_CTRL_RTE: u32 = 536870912;
pub const E1000_CTRL_VME: u32 = 1073741824;
pub const E1000_CTRL_PHY_RST: u32 = 2147483648;
pub const E1000_CTRL_SW2FW_INT: u32 = 33554432;
pub const E1000_STATUS_FD: u32 = 1;
pub const E1000_STATUS_LU: u32 = 2;
pub const E1000_STATUS_FUNC_MASK: u32 = 12;
pub const E1000_STATUS_FUNC_SHIFT: u32 = 2;
pub const E1000_STATUS_FUNC_0: u32 = 0;
pub const E1000_STATUS_FUNC_1: u32 = 4;
pub const E1000_STATUS_TXOFF: u32 = 16;
pub const E1000_STATUS_TBIMODE: u32 = 32;
pub const E1000_STATUS_SPEED_MASK: u32 = 192;
pub const E1000_STATUS_SPEED_10: u32 = 0;
pub const E1000_STATUS_SPEED_100: u32 = 64;
pub const E1000_STATUS_SPEED_1000: u32 = 128;
pub const E1000_STATUS_LAN_INIT_DONE: u32 = 512;
pub const E1000_STATUS_ASDV: u32 = 768;
pub const E1000_STATUS_DOCK_CI: u32 = 2048;
pub const E1000_STATUS_GIO_MASTER_ENABLE: u32 = 524288;
pub const E1000_STATUS_MTXCKOK: u32 = 1024;
pub const E1000_STATUS_PCI66: u32 = 2048;
pub const E1000_STATUS_BUint64_t: u32 = 4096;
pub const E1000_STATUS_PCIX_MODE: u32 = 8192;
pub const E1000_STATUS_PCIX_SPEED: u32 = 49152;
pub const E1000_STATUS_BMC_SKU_0: u32 = 1048576;
pub const E1000_STATUS_BMC_SKU_1: u32 = 2097152;
pub const E1000_STATUS_BMC_SKU_2: u32 = 4194304;
pub const E1000_STATUS_BMC_CRYPTO: u32 = 8388608;
pub const E1000_STATUS_BMC_LITE: u32 = 16777216;
pub const E1000_STATUS_RGMII_ENABLE: u32 = 33554432;
pub const E1000_STATUS_FUSE_8: u32 = 67108864;
pub const E1000_STATUS_FUSE_9: u32 = 134217728;
pub const E1000_STATUS_SERDES0_DIS: u32 = 268435456;
pub const E1000_STATUS_SERDES1_DIS: u32 = 536870912;
pub const E1000_STATUS_PCIX_SPEED_66: u32 = 0;
pub const E1000_STATUS_PCIX_SPEED_100: u32 = 16384;
pub const E1000_STATUS_PCIX_SPEED_133: u32 = 32768;
pub const E1000_EECD_SK: u32 = 1;
pub const E1000_EECD_CS: u32 = 2;
pub const E1000_EECD_DI: u32 = 4;
pub const E1000_EECD_DO: u32 = 8;
pub const E1000_EECD_FWE_MASK: u32 = 48;
pub const E1000_EECD_FWE_DIS: u32 = 16;
pub const E1000_EECD_FWE_EN: u32 = 32;
pub const E1000_EECD_FWE_SHIFT: u32 = 4;
pub const E1000_EECD_REQ: u32 = 64;
pub const E1000_EECD_GNT: u32 = 128;
pub const E1000_EECD_PRES: u32 = 256;
pub const E1000_EECD_SIZE: u32 = 512;
pub const E1000_EECD_ADDR_BITS: u32 = 1024;
pub const E1000_EECD_TYPE: u32 = 8192;
pub const E1000_EEPROM_GRANT_ATTEMPTS: u32 = 1000;
pub const E1000_EECD_AUTO_RD: u32 = 512;
pub const E1000_EECD_SIZE_EX_MASK: u32 = 30720;
pub const E1000_EECD_SIZE_EX_SHIFT: u32 = 11;
pub const E1000_EECD_NVADDS: u32 = 98304;
pub const E1000_EECD_SELSHAD: u32 = 131072;
pub const E1000_EECD_INITSRAM: u32 = 262144;
pub const E1000_EECD_FLUPD: u32 = 524288;
pub const E1000_EECD_AUPDEN: u32 = 1048576;
pub const E1000_EECD_SHADV: u32 = 2097152;
pub const E1000_EECD_SEC1VAL: u32 = 4194304;
pub const E1000_EECD_SECVAL_SHIFT: u32 = 22;
pub const E1000_STM_OPCODE: u32 = 56064;
pub const E1000_HICR_FW_RESET: u32 = 192;
pub const E1000_SHADOW_RAM_WORDS: u32 = 2048;
pub const E1000_ICH_NVM_SIG_WORD: u32 = 19;
pub const E1000_ICH_NVM_SIG_MASK: u32 = 192;
pub const E1000_EERD_START: u32 = 1;
pub const E1000_EERD_DONE: u32 = 16;
pub const E1000_EERD_ADDR_SHIFT: u32 = 8;
pub const E1000_EERD_ADDR_MASK: u32 = 65280;
pub const E1000_EERD_DATA_SHIFT: u32 = 16;
pub const E1000_EERD_DATA_MASK: u32 = 4294901760;
pub const EEPROM_STATUS_RDY_SPI: u32 = 1;
pub const EEPROM_STATUS_WEN_SPI: u32 = 2;
pub const EEPROM_STATUS_BP0_SPI: u32 = 4;
pub const EEPROM_STATUS_BP1_SPI: u32 = 8;
pub const EEPROM_STATUS_WPEN_SPI: u32 = 128;
pub const E1000_CTRL_EXT_GPI0_EN: u32 = 1;
pub const E1000_CTRL_EXT_GPI1_EN: u32 = 2;
pub const E1000_CTRL_EXT_PHYINT_EN: u32 = 2;
pub const E1000_CTRL_EXT_GPI2_EN: u32 = 4;
pub const E1000_CTRL_EXT_GPI3_EN: u32 = 8;
pub const E1000_CTRL_EXT_SDP4_DATA: u32 = 16;
pub const E1000_CTRL_EXT_SDP5_DATA: u32 = 32;
pub const E1000_CTRL_EXT_PHY_INT: u32 = 32;
pub const E1000_CTRL_EXT_SDP6_DATA: u32 = 64;
pub const E1000_CTRL_EXT_SDP7_DATA: u32 = 128;
pub const E1000_CTRL_EXT_SDP4_DIR: u32 = 256;
pub const E1000_CTRL_EXT_SDP5_DIR: u32 = 512;
pub const E1000_CTRL_EXT_SDP6_DIR: u32 = 1024;
pub const E1000_CTRL_EXT_SDP7_DIR: u32 = 2048;
pub const E1000_CTRL_EXT_ASDCHK: u32 = 4096;
pub const E1000_CTRL_EXT_EE_RST: u32 = 8192;
pub const E1000_CTRL_EXT_IPS: u32 = 16384;
pub const E1000_CTRL_EXT_SPD_BYPS: u32 = 32768;
pub const E1000_CTRL_EXT_RO_DIS: u32 = 131072;
pub const E1000_CTRL_EXT_LINK_MODE_MASK: u32 = 12582912;
pub const E1000_CTRL_EXT_LINK_MODE_GMII: u32 = 0;
pub const E1000_CTRL_EXT_LINK_MODE_TBI: u32 = 12582912;
pub const E1000_CTRL_EXT_LINK_MODE_KMRN: u32 = 0;
pub const E1000_CTRL_EXT_LINK_MODE_SERDES: u32 = 12582912;
pub const E1000_CTRL_EXT_LINK_MODE_SGMII: u32 = 8388608;
pub const E1000_CTRL_EXT_WR_WMARK_MASK: u32 = 50331648;
pub const E1000_CTRL_EXT_WR_WMARK_256: u32 = 0;
pub const E1000_CTRL_EXT_WR_WMARK_320: u32 = 16777216;
pub const E1000_CTRL_EXT_WR_WMARK_384: u32 = 33554432;
pub const E1000_CTRL_EXT_WR_WMARK_448: u32 = 50331648;
pub const E1000_CTRL_EXT_DRV_LOAD: u32 = 268435456;
pub const E1000_CTRL_EXT_IAME: u32 = 134217728;
pub const E1000_CTRL_EXT_INT_TIMER_CLR: u32 = 536870912;
pub const E1000_CRTL_EXT_PB_PAREN: u32 = 16777216;
pub const E1000_CTRL_EXT_DF_PAREN: u32 = 33554432;
pub const E1000_CTRL_EXT_GHOST_PAREN: u32 = 1073741824;
pub const E1000_MDIC_DATA_MASK: u32 = 65535;
pub const E1000_MDIC_REG_MASK: u32 = 2031616;
pub const E1000_MDIC_REG_SHIFT: u32 = 16;
pub const E1000_MDIC_PHY_MASK: u32 = 65011712;
pub const E1000_MDIC_PHY_SHIFT: u32 = 21;
pub const E1000_MDIC_OP_WRITE: u32 = 67108864;
pub const E1000_MDIC_OP_READ: u32 = 134217728;
pub const E1000_MDIC_READY: u32 = 268435456;
pub const E1000_MDIC_INT_EN: u32 = 536870912;
pub const E1000_MDIC_ERROR: u32 = 1073741824;
pub const INTEL_CE_GBE_MDIC_OP_WRITE: u32 = 67108864;
pub const INTEL_CE_GBE_MDIC_OP_READ: u32 = 0;
pub const INTEL_CE_GBE_MDIC_GO: u32 = 2147483648;
pub const INTEL_CE_GBE_MDIC_READ_ERROR: u32 = 2147483648;
pub const E1000_KUMCTRLSTA_MASK: u32 = 65535;
pub const E1000_KUMCTRLSTA_OFFSET: u32 = 2031616;
pub const E1000_KUMCTRLSTA_OFFSET_SHIFT: u32 = 16;
pub const E1000_KUMCTRLSTA_REN: u32 = 2097152;
pub const E1000_KUMCTRLSTA_OFFSET_FIFO_CTRL: u32 = 0;
pub const E1000_KUMCTRLSTA_OFFSET_CTRL: u32 = 1;
pub const E1000_KUMCTRLSTA_OFFSET_INB_CTRL: u32 = 2;
pub const E1000_KUMCTRLSTA_OFFSET_DIAG: u32 = 3;
pub const E1000_KUMCTRLSTA_OFFSET_TIMEOUTS: u32 = 4;
pub const E1000_KUMCTRLSTA_OFFSET_INB_PARAM: u32 = 9;
pub const E1000_KUMCTRLSTA_OFFSET_HD_CTRL: u32 = 16;
pub const E1000_KUMCTRLSTA_OFFSET_M2P_SERDES: u32 = 30;
pub const E1000_KUMCTRLSTA_OFFSET_M2P_MODES: u32 = 31;
pub const E1000_KUMCTRLSTA_FIFO_CTRL_RX_BYPASS: u32 = 8;
pub const E1000_KUMCTRLSTA_FIFO_CTRL_TX_BYPASS: u32 = 2048;
pub const E1000_KUMCTRLSTA_INB_CTRL_LINK_STATUS_TX_TIMEOUT_DEFAULT: u32 = 1280;
pub const E1000_KUMCTRLSTA_INB_CTRL_DIS_PADDING: u32 = 16;
pub const E1000_KUMCTRLSTA_HD_CTRL_10_100_DEFAULT: u32 = 4;
pub const E1000_KUMCTRLSTA_HD_CTRL_1000_DEFAULT: u32 = 0;
pub const E1000_KUMCTRLSTA_OFFSET_K0S_CTRL: u32 = 30;
pub const E1000_KUMCTRLSTA_DIAG_FELPBK: u32 = 8192;
pub const E1000_KUMCTRLSTA_DIAG_NELPBK: u32 = 4096;
pub const E1000_KUMCTRLSTA_K0S_100_EN: u32 = 8192;
pub const E1000_KUMCTRLSTA_K0S_GBE_EN: u32 = 4096;
pub const E1000_KUMCTRLSTA_K0S_ENTRY_LATENCY_MASK: u32 = 3;
pub const E1000_KABGTXD_BGSQLBIAS: u32 = 327680;
pub const E1000_PHY_CTRL_SPD_EN: u32 = 1;
pub const E1000_PHY_CTRL_D0A_LPLU: u32 = 2;
pub const E1000_PHY_CTRL_NOND0A_LPLU: u32 = 4;
pub const E1000_PHY_CTRL_NOND0A_GBE_DISABLE: u32 = 8;
pub const E1000_PHY_CTRL_GBE_DISABLE: u32 = 64;
pub const E1000_PHY_CTRL_B2B_EN: u32 = 128;
pub const E1000_LEDCTL_LED0_MODE_MASK: u32 = 15;
pub const E1000_LEDCTL_LED0_MODE_SHIFT: u32 = 0;
pub const E1000_LEDCTL_LED0_BLINK_RATE: u32 = 32;
pub const E1000_LEDCTL_LED0_IVRT: u32 = 64;
pub const E1000_LEDCTL_LED0_BLINK: u32 = 128;
pub const E1000_LEDCTL_LED1_MODE_MASK: u32 = 3840;
pub const E1000_LEDCTL_LED1_MODE_SHIFT: u32 = 8;
pub const E1000_LEDCTL_LED1_BLINK_RATE: u32 = 8192;
pub const E1000_LEDCTL_LED1_IVRT: u32 = 16384;
pub const E1000_LEDCTL_LED1_BLINK: u32 = 32768;
pub const E1000_LEDCTL_LED2_MODE_MASK: u32 = 983040;
pub const E1000_LEDCTL_LED2_MODE_SHIFT: u32 = 16;
pub const E1000_LEDCTL_LED2_BLINK_RATE: u32 = 2097152;
pub const E1000_LEDCTL_LED2_IVRT: u32 = 4194304;
pub const E1000_LEDCTL_LED2_BLINK: u32 = 8388608;
pub const E1000_LEDCTL_LED3_MODE_MASK: u32 = 251658240;
pub const E1000_LEDCTL_LED3_MODE_SHIFT: u32 = 24;
pub const E1000_LEDCTL_LED3_BLINK_RATE: u32 = 536870912;
pub const E1000_LEDCTL_LED3_IVRT: u32 = 1073741824;
pub const E1000_LEDCTL_LED3_BLINK: u32 = 2147483648;
pub const E1000_LEDCTL_MODE_LINK_10_1000: u32 = 0;
pub const E1000_LEDCTL_MODE_LINK_100_1000: u32 = 1;
pub const E1000_LEDCTL_MODE_LINK_UP: u32 = 2;
pub const E1000_LEDCTL_MODE_ACTIVITY: u32 = 3;
pub const E1000_LEDCTL_MODE_LINK_ACTIVITY: u32 = 4;
pub const E1000_LEDCTL_MODE_LINK_10: u32 = 5;
pub const E1000_LEDCTL_MODE_LINK_100: u32 = 6;
pub const E1000_LEDCTL_MODE_LINK_1000: u32 = 7;
pub const E1000_LEDCTL_MODE_PCIX_MODE: u32 = 8;
pub const E1000_LEDCTL_MODE_FULL_DUPLEX: u32 = 9;
pub const E1000_LEDCTL_MODE_COLLISION: u32 = 10;
pub const E1000_LEDCTL_MODE_BUS_SPEED: u32 = 11;
pub const E1000_LEDCTL_MODE_BUS_SIZE: u32 = 12;
pub const E1000_LEDCTL_MODE_PAUSED: u32 = 13;
pub const E1000_LEDCTL_MODE_LED_ON: u32 = 14;
pub const E1000_LEDCTL_MODE_LED_OFF: u32 = 15;
pub const E1000_RAH_AV: u32 = 2147483648;
pub const E1000_ICR_TXDW: u32 = 1;
pub const E1000_ICR_TXQE: u32 = 2;
pub const E1000_ICR_LSC: u32 = 4;
pub const E1000_ICR_RXSEQ: u32 = 8;
pub const E1000_ICR_RXDMT0: u32 = 16;
pub const E1000_ICR_RXO: u32 = 64;
pub const E1000_ICR_RXT0: u32 = 128;
pub const E1000_ICR_MDAC: u32 = 512;
pub const E1000_ICR_RXCFG: u32 = 1024;
pub const E1000_ICR_GPI_EN0: u32 = 2048;
pub const E1000_ICR_GPI_EN1: u32 = 4096;
pub const E1000_ICR_GPI_EN2: u32 = 8192;
pub const E1000_ICR_GPI_EN3: u32 = 16384;
pub const E1000_ICR_TXD_LOW: u32 = 32768;
pub const E1000_ICR_SRPD: u32 = 65536;
pub const E1000_ICR_ACK: u32 = 131072;
pub const E1000_ICR_MNG: u32 = 262144;
pub const E1000_ICR_DOCK: u32 = 524288;
pub const E1000_ICR_INT_ASSERTED: u32 = 2147483648;
pub const E1000_ICR_RXD_FIFO_PAR0: u32 = 1048576;
pub const E1000_ICR_TXD_FIFO_PAR0: u32 = 2097152;
pub const E1000_ICR_HOST_ARB_PAR: u32 = 4194304;
pub const E1000_ICR_PB_PAR: u32 = 8388608;
pub const E1000_ICR_RXD_FIFO_PAR1: u32 = 16777216;
pub const E1000_ICR_TXD_FIFO_PAR1: u32 = 33554432;
pub const E1000_ICR_ALL_PARITY: u32 = 66060288;
pub const E1000_ICR_DSW: u32 = 32;
pub const E1000_ICR_PHYINT: u32 = 4096;
pub const E1000_ICR_EPRST: u32 = 1048576;
pub const E1000_ICS_TXDW: u32 = 1;
pub const E1000_ICS_TXQE: u32 = 2;
pub const E1000_ICS_LSC: u32 = 4;
pub const E1000_ICS_RXSEQ: u32 = 8;
pub const E1000_ICS_RXDMT0: u32 = 16;
pub const E1000_ICS_RXO: u32 = 64;
pub const E1000_ICS_RXT0: u32 = 128;
pub const E1000_ICS_MDAC: u32 = 512;
pub const E1000_ICS_RXCFG: u32 = 1024;
pub const E1000_ICS_GPI_EN0: u32 = 2048;
pub const E1000_ICS_GPI_EN1: u32 = 4096;
pub const E1000_ICS_GPI_EN2: u32 = 8192;
pub const E1000_ICS_GPI_EN3: u32 = 16384;
pub const E1000_ICS_TXD_LOW: u32 = 32768;
pub const E1000_ICS_SRPD: u32 = 65536;
pub const E1000_ICS_ACK: u32 = 131072;
pub const E1000_ICS_MNG: u32 = 262144;
pub const E1000_ICS_DOCK: u32 = 524288;
pub const E1000_ICS_RXD_FIFO_PAR0: u32 = 1048576;
pub const E1000_ICS_TXD_FIFO_PAR0: u32 = 2097152;
pub const E1000_ICS_HOST_ARB_PAR: u32 = 4194304;
pub const E1000_ICS_PB_PAR: u32 = 8388608;
pub const E1000_ICS_RXD_FIFO_PAR1: u32 = 16777216;
pub const E1000_ICS_TXD_FIFO_PAR1: u32 = 33554432;
pub const E1000_ICS_DSW: u32 = 32;
pub const E1000_ICS_PHYINT: u32 = 4096;
pub const E1000_ICS_EPRST: u32 = 1048576;
pub const E1000_IMS_TXDW: u32 = 1;
pub const E1000_IMS_TXQE: u32 = 2;
pub const E1000_IMS_LSC: u32 = 4;
pub const E1000_IMS_RXSEQ: u32 = 8;
pub const E1000_IMS_RXDMT0: u32 = 16;
pub const E1000_IMS_RXO: u32 = 64;
pub const E1000_IMS_RXT0: u32 = 128;
pub const E1000_IMS_MDAC: u32 = 512;
pub const E1000_IMS_RXCFG: u32 = 1024;
pub const E1000_IMS_GPI_EN0: u32 = 2048;
pub const E1000_IMS_GPI_EN1: u32 = 4096;
pub const E1000_IMS_GPI_EN2: u32 = 8192;
pub const E1000_IMS_GPI_EN3: u32 = 16384;
pub const E1000_IMS_TXD_LOW: u32 = 32768;
pub const E1000_IMS_SRPD: u32 = 65536;
pub const E1000_IMS_ACK: u32 = 131072;
pub const E1000_IMS_MNG: u32 = 262144;
pub const E1000_IMS_DOCK: u32 = 524288;
pub const E1000_IMS_RXD_FIFO_PAR0: u32 = 1048576;
pub const E1000_IMS_TXD_FIFO_PAR0: u32 = 2097152;
pub const E1000_IMS_HOST_ARB_PAR: u32 = 4194304;
pub const E1000_IMS_PB_PAR: u32 = 8388608;
pub const E1000_IMS_RXD_FIFO_PAR1: u32 = 16777216;
pub const E1000_IMS_TXD_FIFO_PAR1: u32 = 33554432;
pub const E1000_IMS_DSW: u32 = 32;
pub const E1000_IMS_PHYINT: u32 = 4096;
pub const E1000_IMS_EPRST: u32 = 1048576;
pub const E1000_IMC_TXDW: u32 = 1;
pub const E1000_IMC_TXQE: u32 = 2;
pub const E1000_IMC_LSC: u32 = 4;
pub const E1000_IMC_RXSEQ: u32 = 8;
pub const E1000_IMC_RXDMT0: u32 = 16;
pub const E1000_IMC_RXO: u32 = 64;
pub const E1000_IMC_RXT0: u32 = 128;
pub const E1000_IMC_MDAC: u32 = 512;
pub const E1000_IMC_RXCFG: u32 = 1024;
pub const E1000_IMC_GPI_EN0: u32 = 2048;
pub const E1000_IMC_GPI_EN1: u32 = 4096;
pub const E1000_IMC_GPI_EN2: u32 = 8192;
pub const E1000_IMC_GPI_EN3: u32 = 16384;
pub const E1000_IMC_TXD_LOW: u32 = 32768;
pub const E1000_IMC_SRPD: u32 = 65536;
pub const E1000_IMC_ACK: u32 = 131072;
pub const E1000_IMC_MNG: u32 = 262144;
pub const E1000_IMC_DOCK: u32 = 524288;
pub const E1000_IMC_RXD_FIFO_PAR0: u32 = 1048576;
pub const E1000_IMC_TXD_FIFO_PAR0: u32 = 2097152;
pub const E1000_IMC_HOST_ARB_PAR: u32 = 4194304;
pub const E1000_IMC_PB_PAR: u32 = 8388608;
pub const E1000_IMC_RXD_FIFO_PAR1: u32 = 16777216;
pub const E1000_IMC_TXD_FIFO_PAR1: u32 = 33554432;
pub const E1000_IMC_DSW: u32 = 32;
pub const E1000_IMC_PHYINT: u32 = 4096;
pub const E1000_IMC_EPRST: u32 = 1048576;
pub const E1000_RCTL_RST: u32 = 1;
pub const E1000_RCTL_EN: u32 = 2;
pub const E1000_RCTL_SBP: u32 = 4;
pub const E1000_RCTL_UPE: u32 = 8;
pub const E1000_RCTL_MPE: u32 = 16;
pub const E1000_RCTL_LPE: u32 = 32;
pub const E1000_RCTL_LBM_NO: u32 = 0;
pub const E1000_RCTL_LBM_MAC: u32 = 64;
pub const E1000_RCTL_LBM_SLP: u32 = 128;
pub const E1000_RCTL_LBM_TCVR: u32 = 192;
pub const E1000_RCTL_DTYP_MASK: u32 = 3072;
pub const E1000_RCTL_DTYP_PS: u32 = 1024;
pub const E1000_RCTL_RDMTS_HALF: u32 = 0;
pub const E1000_RCTL_RDMTS_QUAT: u32 = 256;
pub const E1000_RCTL_RDMTS_EIGTH: u32 = 512;
pub const E1000_RCTL_MO_SHIFT: u32 = 12;
pub const E1000_RCTL_MO_0: u32 = 0;
pub const E1000_RCTL_MO_1: u32 = 4096;
pub const E1000_RCTL_MO_2: u32 = 8192;
pub const E1000_RCTL_MO_3: u32 = 12288;
pub const E1000_RCTL_MDR: u32 = 16384;
pub const E1000_RCTL_BAM: u32 = 32768;
pub const E1000_RCTL_SZ_2048: u32 = 0;
pub const E1000_RCTL_SZ_1024: u32 = 65536;
pub const E1000_RCTL_SZ_512: u32 = 131072;
pub const E1000_RCTL_SZ_256: u32 = 196608;
pub const E1000_RCTL_SZ_16384: u32 = 65536;
pub const E1000_RCTL_SZ_8192: u32 = 131072;
pub const E1000_RCTL_SZ_4096: u32 = 196608;
pub const E1000_RCTL_VFE: u32 = 262144;
pub const E1000_RCTL_CFIEN: u32 = 524288;
pub const E1000_RCTL_CFI: u32 = 1048576;
pub const E1000_RCTL_DPF: u32 = 4194304;
pub const E1000_RCTL_PMCF: u32 = 8388608;
pub const E1000_RCTL_BSEX: u32 = 33554432;
pub const E1000_RCTL_SECRC: u32 = 67108864;
pub const E1000_RCTL_FLXBUF_MASK: u32 = 2013265920;
pub const E1000_RCTL_FLXBUF_SHIFT: u32 = 27;
pub const E1000_PSRCTL_BSIZE0_MASK: u32 = 127;
pub const E1000_PSRCTL_BSIZE1_MASK: u32 = 16128;
pub const E1000_PSRCTL_BSIZE2_MASK: u32 = 4128768;
pub const E1000_PSRCTL_BSIZE3_MASK: u32 = 1056964608;
pub const E1000_PSRCTL_BSIZE0_SHIFT: u32 = 7;
pub const E1000_PSRCTL_BSIZE1_SHIFT: u32 = 2;
pub const E1000_PSRCTL_BSIZE2_SHIFT: u32 = 6;
pub const E1000_PSRCTL_BSIZE3_SHIFT: u32 = 14;
pub const E1000_SWFW_EEP_SM: u32 = 1;
pub const E1000_SWFW_PHY0_SM: u32 = 2;
pub const E1000_SWFW_PHY1_SM: u32 = 4;
pub const E1000_SWFW_MAC_CSR_SM: u32 = 8;
pub const E1000_RDT_DELAY: u32 = 65535;
pub const E1000_RDT_FPDB: u32 = 2147483648;
pub const E1000_RDLEN_LEN: u32 = 524160;
pub const E1000_RDH_RDH: u32 = 65535;
pub const E1000_RDT_RDT: u32 = 65535;
pub const E1000_FCRTH_RTH: u32 = 65528;
pub const E1000_FCRTH_XFCE: u32 = 2147483648;
pub const E1000_FCRTL_RTL: u32 = 65528;
pub const E1000_FCRTL_XONE: u32 = 2147483648;
pub const E1000_RFCTL_ISCSI_DIS: u32 = 1;
pub const E1000_RFCTL_ISCSI_DWC_MASK: u32 = 62;
pub const E1000_RFCTL_ISCSI_DWC_SHIFT: u32 = 1;
pub const E1000_RFCTL_NFSW_DIS: u32 = 64;
pub const E1000_RFCTL_NFSR_DIS: u32 = 128;
pub const E1000_RFCTL_NFS_VER_MASK: u32 = 768;
pub const E1000_RFCTL_NFS_VER_SHIFT: u32 = 8;
pub const E1000_RFCTL_IPV6_DIS: u32 = 1024;
pub const E1000_RFCTL_IPV6_XSUM_DIS: u32 = 2048;
pub const E1000_RFCTL_ACK_DIS: u32 = 4096;
pub const E1000_RFCTL_ACKD_DIS: u32 = 8192;
pub const E1000_RFCTL_IPFRSP_DIS: u32 = 16384;
pub const E1000_RFCTL_EXTEN: u32 = 32768;
pub const E1000_RFCTL_IPV6_EX_DIS: u32 = 65536;
pub const E1000_RFCTL_NEW_IPV6_EXT_DIS: u32 = 131072;
pub const E1000_RXDCTL_PTHRESH: u32 = 63;
pub const E1000_RXDCTL_HTHRESH: u32 = 16128;
pub const E1000_RXDCTL_WTHRESH: u32 = 4128768;
pub const E1000_RXDCTL_GRAN: u32 = 16777216;
pub const E1000_TXDCTL_PTHRESH: u32 = 63;
pub const E1000_TXDCTL_HTHRESH: u32 = 16128;
pub const E1000_TXDCTL_WTHRESH: u32 = 4128768;
pub const E1000_TXDCTL_GRAN: u32 = 16777216;
pub const E1000_TXDCTL_LWTHRESH: u32 = 4261412864;
pub const E1000_TXDCTL_FULL_TX_DESC_WB: u32 = 16842752;
pub const E1000_TXDCTL_COUNT_DESC: u32 = 4194304;
pub const E1000_TXCW_FD: u32 = 32;
pub const E1000_TXCW_HD: u32 = 64;
pub const E1000_TXCW_PAUSE: u32 = 128;
pub const E1000_TXCW_ASM_DIR: u32 = 256;
pub const E1000_TXCW_PAUSE_MASK: u32 = 384;
pub const E1000_TXCW_RF: u32 = 12288;
pub const E1000_TXCW_NP: u32 = 32768;
pub const E1000_TXCW_CW: u32 = 65535;
pub const E1000_TXCW_TXC: u32 = 1073741824;
pub const E1000_TXCW_ANE: u32 = 2147483648;
pub const E1000_RXCW_CW: u32 = 65535;
pub const E1000_RXCW_NC: u32 = 67108864;
pub const E1000_RXCW_IV: u32 = 134217728;
pub const E1000_RXCW_CC: u32 = 268435456;
pub const E1000_RXCW_C: u32 = 536870912;
pub const E1000_RXCW_SYNCH: u32 = 1073741824;
pub const E1000_RXCW_ANC: u32 = 2147483648;
pub const E1000_TCTL_RST: u32 = 1;
pub const E1000_TCTL_EN: u32 = 2;
pub const E1000_TCTL_BCE: u32 = 4;
pub const E1000_TCTL_PSP: u32 = 8;
pub const E1000_TCTL_CT: u32 = 4080;
pub const E1000_TCTL_COLD: u32 = 4190208;
pub const E1000_TCTL_SWXOFF: u32 = 4194304;
pub const E1000_TCTL_PBE: u32 = 8388608;
pub const E1000_TCTL_RTLC: u32 = 16777216;
pub const E1000_TCTL_NRTU: u32 = 33554432;
pub const E1000_TCTL_MULR: u32 = 268435456;
pub const E1000_TCTL_EXT_BST_MASK: u32 = 1023;
pub const E1000_TCTL_EXT_GCEX_MASK: u32 = 1047552;
pub const E1000_RXCSUM_PCSS_MASK: u32 = 255;
pub const E1000_RXCSUM_IPOFL: u32 = 256;
pub const E1000_RXCSUM_TUOFL: u32 = 512;
pub const E1000_RXCSUM_IPV6OFL: u32 = 1024;
pub const E1000_RXCSUM_IPPCSE: u32 = 4096;
pub const E1000_RXCSUM_PCSD: u32 = 8192;
pub const E1000_MRQC_ENABLE_MASK: u32 = 3;
pub const E1000_MRQC_ENABLE_RSS_2Q: u32 = 1;
pub const E1000_MRQC_ENABLE_RSS_INT: u32 = 4;
pub const E1000_MRQC_RSS_FIELD_MASK: u32 = 4294901760;
pub const E1000_MRQC_RSS_FIELD_IPV4_TCP: u32 = 65536;
pub const E1000_MRQC_RSS_FIELD_IPV4: u32 = 131072;
pub const E1000_MRQC_RSS_FIELD_IPV6_TCP_EX: u32 = 262144;
pub const E1000_MRQC_RSS_FIELD_IPV6_EX: u32 = 524288;
pub const E1000_MRQC_RSS_FIELD_IPV6: u32 = 1048576;
pub const E1000_MRQC_RSS_FIELD_IPV6_TCP: u32 = 2097152;
pub const E1000_WUC_APME: u32 = 1;
pub const E1000_WUC_PME_EN: u32 = 2;
pub const E1000_WUC_PME_STATUS: u32 = 4;
pub const E1000_WUC_APMPME: u32 = 8;
pub const E1000_WUC_SPM: u32 = 2147483648;
pub const E1000_WUFC_LNKC: u32 = 1;
pub const E1000_WUFC_MAG: u32 = 2;
pub const E1000_WUFC_EX: u32 = 4;
pub const E1000_WUFC_MC: u32 = 8;
pub const E1000_WUFC_BC: u32 = 16;
pub const E1000_WUFC_ARP: u32 = 32;
pub const E1000_WUFC_IPV4: u32 = 64;
pub const E1000_WUFC_IPV6: u32 = 128;
pub const E1000_WUFC_IGNORE_TCO: u32 = 32768;
pub const E1000_WUFC_FLX0: u32 = 65536;
pub const E1000_WUFC_FLX1: u32 = 131072;
pub const E1000_WUFC_FLX2: u32 = 262144;
pub const E1000_WUFC_FLX3: u32 = 524288;
pub const E1000_WUFC_ALL_FILTERS: u32 = 983295;
pub const E1000_WUFC_FLX_OFFSET: u32 = 16;
pub const E1000_WUFC_FLX_FILTERS: u32 = 983040;
pub const E1000_WUS_LNKC: u32 = 1;
pub const E1000_WUS_MAG: u32 = 2;
pub const E1000_WUS_EX: u32 = 4;
pub const E1000_WUS_MC: u32 = 8;
pub const E1000_WUS_BC: u32 = 16;
pub const E1000_WUS_ARP: u32 = 32;
pub const E1000_WUS_IPV4: u32 = 64;
pub const E1000_WUS_IPV6: u32 = 128;
pub const E1000_WUS_FLX0: u32 = 65536;
pub const E1000_WUS_FLX1: u32 = 131072;
pub const E1000_WUS_FLX2: u32 = 262144;
pub const E1000_WUS_FLX3: u32 = 524288;
pub const E1000_WUS_FLX_FILTERS: u32 = 983040;
pub const E1000_MANC_SMBUS_EN: u32 = 1;
pub const E1000_MANC_ASF_EN: u32 = 2;
pub const E1000_MANC_R_ON_FORCE: u32 = 4;
pub const E1000_MANC_RMCP_EN: u32 = 256;
pub const E1000_MANC_0298_EN: u32 = 512;
pub const E1000_MANC_IPV4_EN: u32 = 1024;
pub const E1000_MANC_IPV6_EN: u32 = 2048;
pub const E1000_MANC_SNAP_EN: u32 = 4096;
pub const E1000_MANC_ARP_EN: u32 = 8192;
pub const E1000_MANC_NEIGHBOR_EN: u32 = 16384;
pub const E1000_MANC_ARP_RES_EN: u32 = 32768;
pub const E1000_MANC_TCO_RESET: u32 = 65536;
pub const E1000_MANC_RCV_TCO_EN: u32 = 131072;
pub const E1000_MANC_REPORT_STATUS: u32 = 262144;
pub const E1000_MANC_RCV_ALL: u32 = 524288;
pub const E1000_MANC_BLK_PHY_RST_ON_IDE: u32 = 262144;
pub const E1000_MANC_EN_MAC_ADDR_FILTER: u32 = 1048576;
pub const E1000_MANC_EN_MNG2HOST: u32 = 2097152;
pub const E1000_MANC_EN_IP_ADDR_FILTER: u32 = 4194304;
pub const E1000_MANC_EN_XSUM_FILTER: u32 = 8388608;
pub const E1000_MANC_BR_EN: u32 = 16777216;
pub const E1000_MANC_SMB_REQ: u32 = 16777216;
pub const E1000_MANC_SMB_GNT: u32 = 33554432;
pub const E1000_MANC_SMB_CLK_IN: u32 = 67108864;
pub const E1000_MANC_SMB_DATA_IN: u32 = 134217728;
pub const E1000_MANC_SMB_DATA_OUT: u32 = 268435456;
pub const E1000_MANC_SMB_CLK_OUT: u32 = 536870912;
pub const E1000_MANC_SMB_DATA_OUT_SHIFT: u32 = 28;
pub const E1000_MANC_SMB_CLK_OUT_SHIFT: u32 = 29;
pub const E1000_SWSM_SMBI: u32 = 1;
pub const E1000_SWSM_SWESMBI: u32 = 2;
pub const E1000_SWSM_WMNG: u32 = 4;
pub const E1000_SWSM_DRV_LOAD: u32 = 8;
pub const E1000_FWSM_MODE_MASK: u32 = 14;
pub const E1000_FWSM_MODE_SHIFT: u32 = 1;
pub const E1000_FWSM_FW_VALID: u32 = 32768;
pub const E1000_FWSM_RSPCIPHY: u32 = 64;
pub const E1000_FWSM_DISSW: u32 = 268435456;
pub const E1000_FWSM_SKUSEL_MASK: u32 = 1610612736;
pub const E1000_FWSM_SKUEL_SHIFT: u32 = 29;
pub const E1000_FWSM_SKUSEL_EMB: u32 = 0;
pub const E1000_FWSM_SKUSEL_CONS: u32 = 1;
pub const E1000_FWSM_SKUSEL_PERF_100: u32 = 2;
pub const E1000_FWSM_SKUSEL_PERF_GBE: u32 = 3;
pub const E1000_FFLT_DBG_INVC: u32 = 1048576;
pub const E1000_HICR_EN: u32 = 1;
pub const E1000_HICR_C: u32 = 2;
pub const E1000_HICR_SV: u32 = 4;
pub const E1000_HICR_FWR: u32 = 128;
pub const E1000_HI_MAX_DATA_LENGTH: u32 = 252;
pub const E1000_HI_MAX_BLOCK_BYTE_LENGTH: u32 = 1792;
pub const E1000_HI_MAX_BLOCK_DWORD_LENGTH: u32 = 448;
pub const E1000_HI_COMMAND_TIMEOUT: u32 = 500;
pub const E1000_HSMC0R_CLKIN: u32 = 1;
pub const E1000_HSMC0R_DATAIN: u32 = 2;
pub const E1000_HSMC0R_DATAOUT: u32 = 4;
pub const E1000_HSMC0R_CLKOUT: u32 = 8;
pub const E1000_HSMC1R_CLKIN: u32 = 1;
pub const E1000_HSMC1R_DATAIN: u32 = 2;
pub const E1000_HSMC1R_DATAOUT: u32 = 4;
pub const E1000_HSMC1R_CLKOUT: u32 = 8;
pub const E1000_FWSTS_FWS_MASK: u32 = 255;
pub const E1000_WUPL_LENGTH_MASK: u32 = 4095;
pub const E1000_MDALIGN: u32 = 4096;
pub const E1000_GCR_RXD_NO_SNOOP: u32 = 1;
pub const E1000_GCR_RXDSCW_NO_SNOOP: u32 = 2;
pub const E1000_GCR_RXDSCR_NO_SNOOP: u32 = 4;
pub const E1000_GCR_TXD_NO_SNOOP: u32 = 8;
pub const E1000_GCR_TXDSCW_NO_SNOOP: u32 = 16;
pub const E1000_GCR_TXDSCR_NO_SNOOP: u32 = 32;
pub const PCI_EX_NO_SNOOP_ALL: u32 = 63;
pub const PCI_EX_82566_SNOOP_ALL: u32 = 63;
pub const E1000_GCR_L1_ACT_WITHOUT_L0S_RX: u32 = 134217728;
pub const E1000_FACTPS_FUNC0_POWER_STATE_MASK: u32 = 3;
pub const E1000_FACTPS_LAN0_VALID: u32 = 4;
pub const E1000_FACTPS_FUNC0_AUX_EN: u32 = 8;
pub const E1000_FACTPS_FUNC1_POWER_STATE_MASK: u32 = 192;
pub const E1000_FACTPS_FUNC1_POWER_STATE_SHIFT: u32 = 6;
pub const E1000_FACTPS_LAN1_VALID: u32 = 256;
pub const E1000_FACTPS_FUNC1_AUX_EN: u32 = 512;
pub const E1000_FACTPS_FUNC2_POWER_STATE_MASK: u32 = 12288;
pub const E1000_FACTPS_FUNC2_POWER_STATE_SHIFT: u32 = 12;
pub const E1000_FACTPS_IDE_ENABLE: u32 = 16384;
pub const E1000_FACTPS_FUNC2_AUX_EN: u32 = 32768;
pub const E1000_FACTPS_FUNC3_POWER_STATE_MASK: u32 = 786432;
pub const E1000_FACTPS_FUNC3_POWER_STATE_SHIFT: u32 = 18;
pub const E1000_FACTPS_SP_ENABLE: u32 = 1048576;
pub const E1000_FACTPS_FUNC3_AUX_EN: u32 = 2097152;
pub const E1000_FACTPS_FUNC4_POWER_STATE_MASK: u32 = 50331648;
pub const E1000_FACTPS_FUNC4_POWER_STATE_SHIFT: u32 = 24;
pub const E1000_FACTPS_IPMI_ENABLE: u32 = 67108864;
pub const E1000_FACTPS_FUNC4_AUX_EN: u32 = 134217728;
pub const E1000_FACTPS_MNGCG: u32 = 536870912;
pub const E1000_FACTPS_LAN_FUNC_SEL: u32 = 1073741824;
pub const E1000_FACTPS_PM_STATE_CHANGED: u32 = 2147483648;
pub const PCI_EX_LINK_STATUS: u32 = 18;
pub const PCI_EX_LINK_WIDTH_MASK: u32 = 1008;
pub const PCI_EX_LINK_WIDTH_SHIFT: u32 = 4;
pub const EEPROM_READ_OPCODE_MICROWIRE: u32 = 6;
pub const EEPROM_WRITE_OPCODE_MICROWIRE: u32 = 5;
pub const EEPROM_ERASE_OPCODE_MICROWIRE: u32 = 7;
pub const EEPROM_EWEN_OPCODE_MICROWIRE: u32 = 19;
pub const EEPROM_EWDS_OPCODE_MICROWIRE: u32 = 16;
pub const EEPROM_MAX_RETRY_SPI: u32 = 5000;
pub const EEPROM_READ_OPCODE_SPI: u32 = 3;
pub const EEPROM_WRITE_OPCODE_SPI: u32 = 2;
pub const EEPROM_A8_OPCODE_SPI: u32 = 8;
pub const EEPROM_WREN_OPCODE_SPI: u32 = 6;
pub const EEPROM_WRDI_OPCODE_SPI: u32 = 4;
pub const EEPROM_RDSR_OPCODE_SPI: u32 = 5;
pub const EEPROM_WRSR_OPCODE_SPI: u32 = 1;
pub const EEPROM_ERASE4K_OPCODE_SPI: u32 = 32;
pub const EEPROM_ERASE64K_OPCODE_SPI: u32 = 216;
pub const EEPROM_ERASE256_OPCODE_SPI: u32 = 219;
pub const EEPROM_WORD_SIZE_SHIFT: u32 = 6;
pub const EEPROM_SIZE_SHIFT: u32 = 10;
pub const EEPROM_SIZE_MASK: u32 = 7168;
pub const EEPROM_COMPAT: u32 = 3;
pub const EEPROM_ID_LED_SETTINGS: u32 = 4;
pub const EEPROM_VERSION: u32 = 5;
pub const EEPROM_SERDES_AMPLITUDE: u32 = 6;
pub const EEPROM_PHY_CLASS_WORD: u32 = 7;
pub const EEPROM_INIT_CONTROL1_REG: u32 = 10;
pub const EEPROM_INIT_CONTROL2_REG: u32 = 15;
pub const EEPROM_SWDEF_PINS_CTRL_PORT_1: u32 = 16;
pub const EEPROM_INIT_CONTROL3_PORT_B: u32 = 20;
pub const EEPROM_INIT_3GIO_3: u32 = 26;
pub const EEPROM_SWDEF_PINS_CTRL_PORT_0: u32 = 32;
pub const EEPROM_INIT_CONTROL3_PORT_A: u32 = 36;
pub const EEPROM_CFG: u32 = 18;
pub const EEPROM_FLASH_VERSION: u32 = 50;
pub const EEPROM_CHECKSUM_REG: u32 = 63;
pub const E1000_EEPROM_CFG_DONE: u32 = 262144;
pub const E1000_EEPROM_CFG_DONE_PORT_1: u32 = 524288;
pub const ID_LED_RESERVED_0000: u32 = 0;
pub const ID_LED_RESERVED_FFFF: u32 = 65535;
pub const ID_LED_DEF1_DEF2: u32 = 1;
pub const ID_LED_DEF1_ON2: u32 = 2;
pub const ID_LED_DEF1_OFF2: u32 = 3;
pub const ID_LED_ON1_DEF2: u32 = 4;
pub const ID_LED_ON1_ON2: u32 = 5;
pub const ID_LED_ON1_OFF2: u32 = 6;
pub const ID_LED_OFF1_DEF2: u32 = 7;
pub const ID_LED_OFF1_ON2: u32 = 8;
pub const ID_LED_OFF1_OFF2: u32 = 9;
pub const IGP_ACTIVITY_LED_MASK: u32 = 4294963455;
pub const IGP_ACTIVITY_LED_ENABLE: u32 = 768;
pub const IGP_LED3_MODE: u32 = 117440512;
pub const EEPROM_SERDES_AMPLITUDE_MASK: u32 = 15;
pub const EEPROM_PHY_CLASS_A: u32 = 32768;
pub const EEPROM_WORD0A_ILOS: u32 = 16;
pub const EEPROM_WORD0A_SWDPIO: u32 = 480;
pub const EEPROM_WORD0A_LRST: u32 = 512;
pub const EEPROM_WORD0A_FD: u32 = 1024;
pub const EEPROM_WORD0A_66MHZ: u32 = 2048;
pub const EEPROM_WORD0F_PAUSE_MASK: u32 = 12288;
pub const EEPROM_WORD0F_PAUSE: u32 = 4096;
pub const EEPROM_WORD0F_ASM_DIR: u32 = 8192;
pub const EEPROM_WORD0F_ANE: u32 = 2048;
pub const EEPROM_WORD0F_SWPDIO_EXT: u32 = 240;
pub const EEPROM_WORD0F_LPLU: u32 = 1;
pub const EEPROM_WORD1020_GIGA_DISABLE: u32 = 16;
pub const EEPROM_WORD1020_GIGA_DISABLE_NON_D0A: u32 = 8;
pub const EEPROM_WORD1A_ASPM_MASK: u32 = 12;
pub const EEPROM_SUM: u32 = 47802;
pub const EEPROM_NODE_ADDRESS_BYTE_0: u32 = 0;
pub const EEPROM_PBA_BYTE_1: u32 = 8;
pub const EEPROM_RESERVED_WORD: u32 = 65535;
pub const PBA_SIZE: u32 = 4;
pub const E1000_COLLISION_THRESHOLD: u32 = 15;
pub const E1000_CT_SHIFT: u32 = 4;
pub const E1000_COLLISION_DISTANCE: u32 = 63;
pub const E1000_COLLISION_DISTANCE_82542: u32 = 64;
pub const E1000_FDX_COLLISION_DISTANCE: u32 = 63;
pub const E1000_HDX_COLLISION_DISTANCE: u32 = 63;
pub const E1000_COLD_SHIFT: u32 = 12;
pub const REQ_TX_DESCRIPTOR_MULTIPLE: u32 = 8;
pub const REQ_RX_DESCRIPTOR_MULTIPLE: u32 = 8;
pub const DEFAULT_82542_TIPG_IPGT: u32 = 10;
pub const DEFAULT_82543_TIPG_IPGT_FIBER: u32 = 9;
pub const DEFAULT_82543_TIPG_IPGT_COPPER: u32 = 8;
pub const E1000_TIPG_IPGT_MASK: u32 = 1023;
pub const E1000_TIPG_IPGR1_MASK: u32 = 1047552;
pub const E1000_TIPG_IPGR2_MASK: u32 = 1072693248;
pub const DEFAULT_82542_TIPG_IPGR1: u32 = 2;
pub const DEFAULT_82543_TIPG_IPGR1: u32 = 8;
pub const E1000_TIPG_IPGR1_SHIFT: u32 = 10;
pub const DEFAULT_82542_TIPG_IPGR2: u32 = 10;
pub const DEFAULT_82543_TIPG_IPGR2: u32 = 6;
pub const E1000_TIPG_IPGR2_SHIFT: u32 = 20;
pub const E1000_TXDMAC_DPP: u32 = 1;
pub const TX_THRESHOLD_START: u32 = 8;
pub const TX_THRESHOLD_INCREMENT: u32 = 10;
pub const TX_THRESHOLD_DECREMENT: u32 = 1;
pub const TX_THRESHOLD_STOP: u32 = 190;
pub const TX_THRESHOLD_DISABLE: u32 = 0;
pub const TX_THRESHOLD_TIMER_MS: u32 = 10000;
pub const MIN_NUM_XMITS: u32 = 1000;
pub const IFS_MAX: u32 = 80;
pub const IFS_STEP: u32 = 10;
pub const IFS_MIN: u32 = 40;
pub const IFS_RATIO: u32 = 4;
pub const E1000_EXTCNF_CTRL_PCIE_WRITE_ENABLE: u32 = 1;
pub const E1000_EXTCNF_CTRL_PHY_WRITE_ENABLE: u32 = 2;
pub const E1000_EXTCNF_CTRL_D_UD_ENABLE: u32 = 4;
pub const E1000_EXTCNF_CTRL_D_UD_LATENCY: u32 = 8;
pub const E1000_EXTCNF_CTRL_D_UD_OWNER: u32 = 16;
pub const E1000_EXTCNF_CTRL_MDIO_SW_OWNERSHIP: u32 = 32;
pub const E1000_EXTCNF_CTRL_MDIO_HW_OWNERSHIP: u32 = 64;
pub const E1000_EXTCNF_CTRL_EXT_CNF_POINTER: u32 = 268369920;
pub const E1000_EXTCNF_SIZE_EXT_PHY_LENGTH: u32 = 255;
pub const E1000_EXTCNF_SIZE_EXT_DOCK_LENGTH: u32 = 65280;
pub const E1000_EXTCNF_SIZE_EXT_PCIE_LENGTH: u32 = 16711680;
pub const E1000_EXTCNF_CTRL_LCD_WRITE_ENABLE: u32 = 1;
pub const E1000_EXTCNF_CTRL_SWFLAG: u32 = 32;
pub const E1000_PBA_8K: u32 = 8;
pub const E1000_PBA_12K: u32 = 12;
pub const E1000_PBA_16K: u32 = 16;
pub const E1000_PBA_20K: u32 = 20;
pub const E1000_PBA_22K: u32 = 22;
pub const E1000_PBA_24K: u32 = 24;
pub const E1000_PBA_30K: u32 = 30;
pub const E1000_PBA_32K: u32 = 32;
pub const E1000_PBA_34K: u32 = 34;
pub const E1000_PBA_38K: u32 = 38;
pub const E1000_PBA_40K: u32 = 40;
pub const E1000_PBA_48K: u32 = 48;
pub const E1000_PBS_16K: u32 = 16;
pub const FLOW_CONTROL_ADDRESS_LOW: u32 = 12746753;
pub const FLOW_CONTROL_ADDRESS_HIGH: u32 = 256;
pub const FLOW_CONTROL_TYPE: u32 = 34824;
pub const FC_DEFAULT_HI_THRESH: u32 = 32768;
pub const FC_DEFAULT_LO_THRESH: u32 = 16384;
pub const FC_DEFAULT_TX_TIMER: u32 = 256;
pub const PCIX_COMMAND_REGISTER: u32 = 230;
pub const PCIX_STATUS_REGISTER_LO: u32 = 232;
pub const PCIX_STATUS_REGISTER_HI: u32 = 234;
pub const PCIX_COMMAND_MMRBC_MASK: u32 = 12;
pub const PCIX_COMMAND_MMRBC_SHIFT: u32 = 2;
pub const PCIX_STATUS_HI_MMRBC_MASK: u32 = 96;
pub const PCIX_STATUS_HI_MMRBC_SHIFT: u32 = 5;
pub const PCIX_STATUS_HI_MMRBC_4K: u32 = 3;
pub const PCIX_STATUS_HI_MMRBC_2K: u32 = 2;
pub const PAUSE_SHIFT: u32 = 5;
pub const SWDPIO_SHIFT: u32 = 17;
pub const SWDPIO__EXT_SHIFT: u32 = 4;
pub const ILOS_SHIFT: u32 = 3;
pub const RECEIVE_BUFFER_ALIGN_SIZE: u32 = 256;
pub const LINK_UP_TIMEOUT: u32 = 500;
pub const AUTO_READ_DONE_TIMEOUT: u32 = 10;
pub const PHY_CFG_TIMEOUT: u32 = 100;
pub const CARRIER_EXTENSION: u32 = 15;
pub const E1000_CTRL_PHY_RESET_DIR: u32 = 4194304;
pub const E1000_CTRL_PHY_RESET: u32 = 262144;
pub const E1000_CTRL_MDIO_DIR: u32 = 16777216;
pub const E1000_CTRL_MDIO: u32 = 1048576;
pub const E1000_CTRL_MDC_DIR: u32 = 33554432;
pub const E1000_CTRL_MDC: u32 = 2097152;
pub const E1000_CTRL_PHY_RESET_DIR4: u32 = 256;
pub const E1000_CTRL_PHY_RESET4: u32 = 16;
pub const PHY_CTRL: u32 = 0;
pub const PHY_STATUS: u32 = 1;
pub const PHY_ID1: u32 = 2;
pub const PHY_ID2: u32 = 3;
pub const PHY_AUTONEG_ADV: u32 = 4;
pub const PHY_LP_ABILITY: u32 = 5;
pub const PHY_AUTONEG_EXP: u32 = 6;
pub const PHY_NEXT_PAGE_TX: u32 = 7;
pub const PHY_LP_NEXT_PAGE: u32 = 8;
pub const PHY_1000T_CTRL: u32 = 9;
pub const PHY_1000T_STATUS: u32 = 10;
pub const PHY_EXT_STATUS: u32 = 15;
pub const MAX_PHY_REG_ADDRESS: u32 = 31;
pub const MAX_PHY_MULTI_PAGE_REG: u32 = 15;
pub const M88E1000_PHY_SPEC_CTRL: u32 = 16;
pub const M88E1000_PHY_SPEC_STATUS: u32 = 17;
pub const M88E1000_INT_ENABLE: u32 = 18;
pub const M88E1000_INT_STATUS: u32 = 19;
pub const M88E1000_EXT_PHY_SPEC_CTRL: u32 = 20;
pub const M88E1000_RX_ERR_CNTR: u32 = 21;
pub const M88E1000_PHY_EXT_CTRL: u32 = 26;
pub const M88E1000_PHY_PAGE_SELECT: u32 = 29;
pub const M88E1000_PHY_GEN_CONTROL: u32 = 30;
pub const M88E1000_PHY_VCO_REG_BIT8: u32 = 256;
pub const M88E1000_PHY_VCO_REG_BIT11: u32 = 2048;
pub const IGP01E1000_IEEE_REGS_PAGE: u32 = 0;
pub const IGP01E1000_IEEE_RESTART_AUTONEG: u32 = 13056;
pub const IGP01E1000_IEEE_FORCE_GIGA: u32 = 320;
pub const IGP01E1000_PHY_PORT_CONFIG: u32 = 16;
pub const IGP01E1000_PHY_PORT_STATUS: u32 = 17;
pub const IGP01E1000_PHY_PORT_CTRL: u32 = 18;
pub const IGP01E1000_PHY_LINK_HEALTH: u32 = 19;
pub const IGP01E1000_GMII_FIFO: u32 = 20;
pub const IGP01E1000_PHY_CHANNEL_QUALITY: u32 = 21;
pub const IGP02E1000_PHY_POWER_MGMT: u32 = 25;
pub const IGP01E1000_PHY_PAGE_SELECT: u32 = 31;
pub const IGP01E1000_PHY_AGC_A: u32 = 4466;
pub const IGP01E1000_PHY_AGC_B: u32 = 4722;
pub const IGP01E1000_PHY_AGC_C: u32 = 5234;
pub const IGP01E1000_PHY_AGC_D: u32 = 6258;
pub const IGP02E1000_PHY_AGC_A: u32 = 4529;
pub const IGP02E1000_PHY_AGC_B: u32 = 4785;
pub const IGP02E1000_PHY_AGC_C: u32 = 5297;
pub const IGP02E1000_PHY_AGC_D: u32 = 6321;
pub const IGP01E1000_PHY_DSP_RESET: u32 = 7987;
pub const IGP01E1000_PHY_DSP_SET: u32 = 8049;
pub const IGP01E1000_PHY_DSP_FFE: u32 = 7989;
pub const IGP01E1000_PHY_CHANNEL_NUM: u32 = 4;
pub const IGP02E1000_PHY_CHANNEL_NUM: u32 = 4;
pub const IGP01E1000_PHY_AGC_PARAM_A: u32 = 4465;
pub const IGP01E1000_PHY_AGC_PARAM_B: u32 = 4721;
pub const IGP01E1000_PHY_AGC_PARAM_C: u32 = 5233;
pub const IGP01E1000_PHY_AGC_PARAM_D: u32 = 6257;
pub const IGP01E1000_PHY_EDAC_MU_INDEX: u32 = 49152;
pub const IGP01E1000_PHY_EDAC_SIGN_EXT_9_BITS: u32 = 32768;
pub const IGP01E1000_PHY_ANALOG_TX_STATE: u32 = 10384;
pub const IGP01E1000_PHY_ANALOG_CLASS_A: u32 = 8192;
pub const IGP01E1000_PHY_FORCE_ANALOG_ENABLE: u32 = 4;
pub const IGP01E1000_PHY_DSP_FFE_CM_CP: u32 = 105;
pub const IGP01E1000_PHY_DSP_FFE_DEFAULT: u32 = 42;
pub const IGP01E1000_PHY_PCS_INIT_REG: u32 = 180;
pub const IGP01E1000_PHY_PCS_CTRL_REG: u32 = 181;
pub const IGP01E1000_ANALOG_REGS_PAGE: u32 = 8384;
pub const MII_CR_SPEED_SELECT_MSB: u32 = 64;
pub const MII_CR_COLL_TEST_ENABLE: u32 = 128;
pub const MII_CR_FULL_DUPLEX: u32 = 256;
pub const MII_CR_RESTART_AUTO_NEG: u32 = 512;
pub const MII_CR_ISOLATE: u32 = 1024;
pub const MII_CR_POWER_DOWN: u32 = 2048;
pub const MII_CR_AUTO_NEG_EN: u32 = 4096;
pub const MII_CR_SPEED_SELECT_LSB: u32 = 8192;
pub const MII_CR_LOOPBACK: u32 = 16384;
pub const MII_CR_RESET: u32 = 32768;
pub const MII_SR_EXTENDED_CAPS: u32 = 1;
pub const MII_SR_JABBER_DETECT: u32 = 2;
pub const MII_SR_LINK_STATUS: u32 = 4;
pub const MII_SR_AUTONEG_CAPS: u32 = 8;
pub const MII_SR_REMOTE_FAULT: u32 = 16;
pub const MII_SR_AUTONEG_COMPLETE: u32 = 32;
pub const MII_SR_PREAMBLE_SUPPRESS: u32 = 64;
pub const MII_SR_EXTENDED_STATUS: u32 = 256;
pub const MII_SR_100T2_HD_CAPS: u32 = 512;
pub const MII_SR_100T2_FD_CAPS: u32 = 1024;
pub const MII_SR_10T_HD_CAPS: u32 = 2048;
pub const MII_SR_10T_FD_CAPS: u32 = 4096;
pub const MII_SR_100X_HD_CAPS: u32 = 8192;
pub const MII_SR_100X_FD_CAPS: u32 = 16384;
pub const MII_SR_100T4_CAPS: u32 = 32768;
pub const NWAY_AR_SELECTOR_FIELD: u32 = 1;
pub const NWAY_AR_10T_HD_CAPS: u32 = 32;
pub const NWAY_AR_10T_FD_CAPS: u32 = 64;
pub const NWAY_AR_100TX_HD_CAPS: u32 = 128;
pub const NWAY_AR_100TX_FD_CAPS: u32 = 256;
pub const NWAY_AR_100T4_CAPS: u32 = 512;
pub const NWAY_AR_PAUSE: u32 = 1024;
pub const NWAY_AR_ASM_DIR: u32 = 2048;
pub const NWAY_AR_REMOTE_FAULT: u32 = 8192;
pub const NWAY_AR_NEXT_PAGE: u32 = 32768;
pub const NWAY_LPAR_SELECTOR_FIELD: u32 = 0;
pub const NWAY_LPAR_10T_HD_CAPS: u32 = 32;
pub const NWAY_LPAR_10T_FD_CAPS: u32 = 64;
pub const NWAY_LPAR_100TX_HD_CAPS: u32 = 128;
pub const NWAY_LPAR_100TX_FD_CAPS: u32 = 256;
pub const NWAY_LPAR_100T4_CAPS: u32 = 512;
pub const NWAY_LPAR_PAUSE: u32 = 1024;
pub const NWAY_LPAR_ASM_DIR: u32 = 2048;
pub const NWAY_LPAR_REMOTE_FAULT: u32 = 8192;
pub const NWAY_LPAR_ACKNOWLEDGE: u32 = 16384;
pub const NWAY_LPAR_NEXT_PAGE: u32 = 32768;
pub const NWAY_ER_LP_NWAY_CAPS: u32 = 1;
pub const NWAY_ER_PAGE_RXD: u32 = 2;
pub const NWAY_ER_NEXT_PAGE_CAPS: u32 = 4;
pub const NWAY_ER_LP_NEXT_PAGE_CAPS: u32 = 8;
pub const NWAY_ER_PAR_DETECT_FAULT: u32 = 16;
pub const NPTX_MSG_CODE_FIELD: u32 = 1;
pub const NPTX_TOGGLE: u32 = 2048;
pub const NPTX_ACKNOWLDGE2: u32 = 4096;
pub const NPTX_MSG_PAGE: u32 = 8192;
pub const NPTX_NEXT_PAGE: u32 = 32768;
pub const LP_RNPR_MSG_CODE_FIELD: u32 = 1;
pub const LP_RNPR_TOGGLE: u32 = 2048;
pub const LP_RNPR_ACKNOWLDGE2: u32 = 4096;
pub const LP_RNPR_MSG_PAGE: u32 = 8192;
pub const LP_RNPR_ACKNOWLDGE: u32 = 16384;
pub const LP_RNPR_NEXT_PAGE: u32 = 32768;
pub const CR_1000T_ASYM_PAUSE: u32 = 128;
pub const CR_1000T_HD_CAPS: u32 = 256;
pub const CR_1000T_FD_CAPS: u32 = 512;
pub const CR_1000T_REPEATER_DTE: u32 = 1024;
pub const CR_1000T_MS_VALUE: u32 = 2048;
pub const CR_1000T_MS_ENABLE: u32 = 4096;
pub const CR_1000T_TEST_MODE_NORMAL: u32 = 0;
pub const CR_1000T_TEST_MODE_1: u32 = 8192;
pub const CR_1000T_TEST_MODE_2: u32 = 16384;
pub const CR_1000T_TEST_MODE_3: u32 = 24576;
pub const CR_1000T_TEST_MODE_4: u32 = 32768;
pub const SR_1000T_IDLE_ERROR_CNT: u32 = 255;
pub const SR_1000T_ASYM_PAUSE_DIR: u32 = 256;
pub const SR_1000T_LP_HD_CAPS: u32 = 1024;
pub const SR_1000T_LP_FD_CAPS: u32 = 2048;
pub const SR_1000T_REMOTE_RX_STATUS: u32 = 4096;
pub const SR_1000T_LOCAL_RX_STATUS: u32 = 8192;
pub const SR_1000T_MS_CONFIG_RES: u32 = 16384;
pub const SR_1000T_MS_CONFIG_FAULT: u32 = 32768;
pub const SR_1000T_REMOTE_RX_STATUS_SHIFT: u32 = 12;
pub const SR_1000T_LOCAL_RX_STATUS_SHIFT: u32 = 13;
pub const SR_1000T_PHY_EXCESSIVE_IDLE_ERR_COUNT: u32 = 5;
pub const FFE_IDLE_ERR_COUNT_TIMEOUT_20: u32 = 20;
pub const FFE_IDLE_ERR_COUNT_TIMEOUT_100: u32 = 100;
pub const IEEE_ESR_1000T_HD_CAPS: u32 = 4096;
pub const IEEE_ESR_1000T_FD_CAPS: u32 = 8192;
pub const IEEE_ESR_1000X_HD_CAPS: u32 = 16384;
pub const IEEE_ESR_1000X_FD_CAPS: u32 = 32768;
pub const PHY_TX_POLARITY_MASK: u32 = 256;
pub const PHY_TX_NORMAL_POLARITY: u32 = 0;
pub const AUTO_POLARITY_DISABLE: u32 = 16;
pub const M88E1000_PSCR_JABBER_DISABLE: u32 = 1;
pub const M88E1000_PSCR_POLARITY_REVERSAL: u32 = 2;
pub const M88E1000_PSCR_SQE_TEST: u32 = 4;
pub const M88E1000_PSCR_CLK125_DISABLE: u32 = 16;
pub const M88E1000_PSCR_MDI_MANUAL_MODE: u32 = 0;
pub const M88E1000_PSCR_MDIX_MANUAL_MODE: u32 = 32;
pub const M88E1000_PSCR_AUTO_X_1000T: u32 = 64;
pub const M88E1000_PSCR_AUTO_X_MODE: u32 = 96;
pub const M88E1000_PSCR_10BT_EXT_DIST_ENABLE: u32 = 128;
pub const M88E1000_PSCR_MII_5BIT_ENABLE: u32 = 256;
pub const M88E1000_PSCR_SCRAMBLER_DISABLE: u32 = 512;
pub const M88E1000_PSCR_FORCE_LINK_GOOD: u32 = 1024;
pub const M88E1000_PSCR_ASSERT_CRS_ON_TX: u32 = 2048;
pub const M88E1000_PSCR_POLARITY_REVERSAL_SHIFT: u32 = 1;
pub const M88E1000_PSCR_AUTO_X_MODE_SHIFT: u32 = 5;
pub const M88E1000_PSCR_10BT_EXT_DIST_ENABLE_SHIFT: u32 = 7;
pub const M88E1000_PSSR_JABBER: u32 = 1;
pub const M88E1000_PSSR_REV_POLARITY: u32 = 2;
pub const M88E1000_PSSR_DOWNSHIFT: u32 = 32;
pub const M88E1000_PSSR_MDIX: u32 = 64;
pub const M88E1000_PSSR_CABLE_LENGTH: u32 = 896;
pub const M88E1000_PSSR_LINK: u32 = 1024;
pub const M88E1000_PSSR_SPD_DPLX_RESOLVED: u32 = 2048;
pub const M88E1000_PSSR_PAGE_RCVD: u32 = 4096;
pub const M88E1000_PSSR_DPLX: u32 = 8192;
pub const M88E1000_PSSR_SPEED: u32 = 49152;
pub const M88E1000_PSSR_10MBS: u32 = 0;
pub const M88E1000_PSSR_100MBS: u32 = 16384;
pub const M88E1000_PSSR_1000MBS: u32 = 32768;
pub const M88E1000_PSSR_REV_POLARITY_SHIFT: u32 = 1;
pub const M88E1000_PSSR_DOWNSHIFT_SHIFT: u32 = 5;
pub const M88E1000_PSSR_MDIX_SHIFT: u32 = 6;
pub const M88E1000_PSSR_CABLE_LENGTH_SHIFT: u32 = 7;
pub const M88E1000_EPSCR_FIBER_LOOPBACK: u32 = 16384;
pub const M88E1000_EPSCR_DOWN_NO_IDLE: u32 = 32768;
pub const M88E1000_EPSCR_MASTER_DOWNSHIFT_MASK: u32 = 3072;
pub const M88E1000_EPSCR_MASTER_DOWNSHIFT_1X: u32 = 0;
pub const M88E1000_EPSCR_MASTER_DOWNSHIFT_2X: u32 = 1024;
pub const M88E1000_EPSCR_MASTER_DOWNSHIFT_3X: u32 = 2048;
pub const M88E1000_EPSCR_MASTER_DOWNSHIFT_4X: u32 = 3072;
pub const M88E1000_EPSCR_SLAVE_DOWNSHIFT_MASK: u32 = 768;
pub const M88E1000_EPSCR_SLAVE_DOWNSHIFT_DIS: u32 = 0;
pub const M88E1000_EPSCR_SLAVE_DOWNSHIFT_1X: u32 = 256;
pub const M88E1000_EPSCR_SLAVE_DOWNSHIFT_2X: u32 = 512;
pub const M88E1000_EPSCR_SLAVE_DOWNSHIFT_3X: u32 = 768;
pub const M88E1000_EPSCR_TX_CLK_2_5: u32 = 96;
pub const M88E1000_EPSCR_TX_CLK_25: u32 = 112;
pub const M88E1000_EPSCR_TX_CLK_0: u32 = 0;
pub const M88EC018_EPSCR_DOWNSHIFT_COUNTER_MASK: u32 = 3584;
pub const M88EC018_EPSCR_DOWNSHIFT_COUNTER_1X: u32 = 0;
pub const M88EC018_EPSCR_DOWNSHIFT_COUNTER_2X: u32 = 512;
pub const M88EC018_EPSCR_DOWNSHIFT_COUNTER_3X: u32 = 1024;
pub const M88EC018_EPSCR_DOWNSHIFT_COUNTER_4X: u32 = 1536;
pub const M88EC018_EPSCR_DOWNSHIFT_COUNTER_5X: u32 = 2048;
pub const M88EC018_EPSCR_DOWNSHIFT_COUNTER_6X: u32 = 2560;
pub const M88EC018_EPSCR_DOWNSHIFT_COUNTER_7X: u32 = 3072;
pub const M88EC018_EPSCR_DOWNSHIFT_COUNTER_8X: u32 = 3584;
pub const IGP01E1000_PSCFR_AUTO_MDIX_PAR_DETECT: u32 = 16;
pub const IGP01E1000_PSCFR_PRE_EN: u32 = 32;
pub const IGP01E1000_PSCFR_SMART_SPEED: u32 = 128;
pub const IGP01E1000_PSCFR_DISABLE_TPLOOPBACK: u32 = 256;
pub const IGP01E1000_PSCFR_DISABLE_JABBER: u32 = 1024;
pub const IGP01E1000_PSCFR_DISABLE_TRANSMIT: u32 = 8192;
pub const IGP01E1000_PSSR_AUTONEG_FAILED: u32 = 1;
pub const IGP01E1000_PSSR_POLARITY_REVERSED: u32 = 2;
pub const IGP01E1000_PSSR_CABLE_LENGTH: u32 = 124;
pub const IGP01E1000_PSSR_FULL_DUPLEX: u32 = 512;
pub const IGP01E1000_PSSR_LINK_UP: u32 = 1024;
pub const IGP01E1000_PSSR_MDIX: u32 = 2048;
pub const IGP01E1000_PSSR_SPEED_MASK: u32 = 49152;
pub const IGP01E1000_PSSR_SPEED_10MBPS: u32 = 16384;
pub const IGP01E1000_PSSR_SPEED_100MBPS: u32 = 32768;
pub const IGP01E1000_PSSR_SPEED_1000MBPS: u32 = 49152;
pub const IGP01E1000_PSSR_CABLE_LENGTH_SHIFT: u32 = 2;
pub const IGP01E1000_PSSR_MDIX_SHIFT: u32 = 11;
pub const IGP01E1000_PSCR_TP_LOOPBACK: u32 = 16;
pub const IGP01E1000_PSCR_CORRECT_NC_SCMBLR: u32 = 512;
pub const IGP01E1000_PSCR_TEN_CRS_SELECT: u32 = 1024;
pub const IGP01E1000_PSCR_FLIP_CHIP: u32 = 2048;
pub const IGP01E1000_PSCR_AUTO_MDIX: u32 = 4096;
pub const IGP01E1000_PSCR_FORCE_MDI_MDIX: u32 = 8192;
pub const IGP01E1000_PLHR_SS_DOWNGRADE: u32 = 32768;
pub const IGP01E1000_PLHR_GIG_SCRAMBLER_ERROR: u32 = 16384;
pub const IGP01E1000_PLHR_MASTER_FAULT: u32 = 8192;
pub const IGP01E1000_PLHR_MASTER_RESOLUTION: u32 = 4096;
pub const IGP01E1000_PLHR_GIG_REM_RCVR_NOK: u32 = 2048;
pub const IGP01E1000_PLHR_IDLE_ERROR_CNT_OFLOW: u32 = 1024;
pub const IGP01E1000_PLHR_DATA_ERR_1: u32 = 512;
pub const IGP01E1000_PLHR_DATA_ERR_0: u32 = 256;
pub const IGP01E1000_PLHR_AUTONEG_FAULT: u32 = 64;
pub const IGP01E1000_PLHR_AUTONEG_ACTIVE: u32 = 16;
pub const IGP01E1000_PLHR_VALID_CHANNEL_D: u32 = 8;
pub const IGP01E1000_PLHR_VALID_CHANNEL_C: u32 = 4;
pub const IGP01E1000_PLHR_VALID_CHANNEL_B: u32 = 2;
pub const IGP01E1000_PLHR_VALID_CHANNEL_A: u32 = 1;
pub const IGP01E1000_MSE_CHANNEL_D: u32 = 15;
pub const IGP01E1000_MSE_CHANNEL_C: u32 = 240;
pub const IGP01E1000_MSE_CHANNEL_B: u32 = 3840;
pub const IGP01E1000_MSE_CHANNEL_A: u32 = 61440;
pub const IGP02E1000_PM_SPD: u32 = 1;
pub const IGP02E1000_PM_D3_LPLU: u32 = 4;
pub const IGP02E1000_PM_D0_LPLU: u32 = 2;
pub const DSP_RESET_ENABLE: u32 = 0;
pub const DSP_RESET_DISABLE: u32 = 2;
pub const E1000_MAX_DSP_RESETS: u32 = 10;
pub const IGP01E1000_AGC_LENGTH_SHIFT: u32 = 7;
pub const IGP02E1000_AGC_LENGTH_SHIFT: u32 = 9;
pub const IGP02E1000_AGC_LENGTH_MASK: u32 = 127;
pub const IGP01E1000_AGC_LENGTH_TABLE_SIZE: u32 = 128;
pub const IGP02E1000_AGC_LENGTH_TABLE_SIZE: u32 = 113;
pub const IGP01E1000_AGC_RANGE: u32 = 10;
pub const IGP02E1000_AGC_RANGE: u32 = 15;
pub const IGP01E1000_PHY_POLARITY_MASK: u32 = 120;
pub const IGP01E1000_GMII_FLEX_SPD: u32 = 16;
pub const IGP01E1000_GMII_SPD: u32 = 32;
pub const IGP01E1000_ANALOG_SPARE_FUSE_STATUS: u32 = 8401;
pub const IGP01E1000_ANALOG_FUSE_STATUS: u32 = 8400;
pub const IGP01E1000_ANALOG_FUSE_CONTROL: u32 = 8412;
pub const IGP01E1000_ANALOG_FUSE_BYPASS: u32 = 8414;
pub const IGP01E1000_ANALOG_FUSE_POLY_MASK: u32 = 61440;
pub const IGP01E1000_ANALOG_FUSE_FINE_MASK: u32 = 3968;
pub const IGP01E1000_ANALOG_FUSE_COARSE_MASK: u32 = 112;
pub const IGP01E1000_ANALOG_SPARE_FUSE_ENABLED: u32 = 256;
pub const IGP01E1000_ANALOG_FUSE_ENABLE_SW_CONTROL: u32 = 2;
pub const IGP01E1000_ANALOG_FUSE_COARSE_THRESH: u32 = 64;
pub const IGP01E1000_ANALOG_FUSE_COARSE_10: u32 = 16;
pub const IGP01E1000_ANALOG_FUSE_FINE_1: u32 = 128;
pub const IGP01E1000_ANALOG_FUSE_FINE_10: u32 = 1280;
pub const M88_VENDOR: u32 = 321;
pub const M88E1000_E_PHY_ID: u32 = 21040208;
pub const M88E1000_I_PHY_ID: u32 = 21040176;
pub const M88E1011_I_PHY_ID: u32 = 21040160;
pub const IGP01E1000_I_PHY_ID: u32 = 44565376;
pub const M88E1000_12_PHY_ID: u32 = 21040208;
pub const M88E1000_14_PHY_ID: u32 = 21040208;
pub const M88E1011_I_REV_4: u32 = 4;
pub const M88E1111_I_PHY_ID: u32 = 21040320;
pub const M88E1118_E_PHY_ID: u32 = 21040704;
pub const L1LXT971A_PHY_ID: u32 = 1276128;
pub const RTL8211B_PHY_ID: u32 = 1886480;
pub const RTL8201N_PHY_ID: u32 = 33280;
pub const RTL_PHY_CTRL_FD: u32 = 256;
pub const RTL_PHY_CTRL_SPD_100: u32 = 2097152;
pub const PHY_PAGE_SHIFT: u32 = 5;
pub const IGP3_KMRN_DIAG_PCS_LOCK_LOSS: u32 = 2;
pub const IGP3_VR_CTRL_MODE_SHUT: u32 = 512;
pub const IGP3_VR_CTRL_MODE_MASK: u32 = 768;
pub const IGP3_CAP_INITIATE_TEAM: u32 = 1;
pub const IGP3_CAP_WFM: u32 = 2;
pub const IGP3_CAP_ASF: u32 = 4;
pub const IGP3_CAP_LPLU: u32 = 8;
pub const IGP3_CAP_DC_AUTO_SPEED: u32 = 16;
pub const IGP3_CAP_SPD: u32 = 32;
pub const IGP3_CAP_MULT_QUEUE: u32 = 64;
pub const IGP3_CAP_RSS: u32 = 128;
pub const IGP3_CAP_8021PQ: u32 = 256;
pub const IGP3_CAP_AMT_CB: u32 = 512;
pub const IGP3_PPC_JORDAN_EN: u32 = 1;
pub const IGP3_PPC_JORDAN_GIGA_SPEED: u32 = 2;
pub const IGP3_KMRN_PMC_EE_IDLE_LINK_DIS: u32 = 1;
pub const IGP3_KMRN_PMC_K0S_ENTRY_LATENCY_MASK: u32 = 30;
pub const IGP3_KMRN_PMC_K0S_MODE1_EN_GIGA: u32 = 32;
pub const IGP3_KMRN_PMC_K0S_MODE1_EN_100: u32 = 64;
pub const IGP3E1000_PHY_MISC_CTRL: u32 = 27;
pub const IGP3_PHY_MISC_DUPLEX_MANUAL_SET: u32 = 4096;
pub const IGP3_KMRN_EC_DIS_INBAND: u32 = 128;
pub const IGP03E1000_E_PHY_ID: u32 = 44565392;
pub const IFE_E_PHY_ID: u32 = 44565296;
pub const IFE_PLUS_E_PHY_ID: u32 = 44565280;
pub const IFE_C_E_PHY_ID: u32 = 44565264;
pub const IFE_PHY_EXTENDED_STATUS_CONTROL: u32 = 16;
pub const IFE_PHY_SPECIAL_CONTROL: u32 = 17;
pub const IFE_PHY_RCV_FALSE_CARRIER: u32 = 19;
pub const IFE_PHY_RCV_DISCONNECT: u32 = 20;
pub const IFE_PHY_RCV_ERROT_FRAME: u32 = 21;
pub const IFE_PHY_RCV_SYMBOL_ERR: u32 = 22;
pub const IFE_PHY_PREM_EOF_ERR: u32 = 23;
pub const IFE_PHY_RCV_EOF_ERR: u32 = 24;
pub const IFE_PHY_TX_JABBER_DETECT: u32 = 25;
pub const IFE_PHY_EQUALIZER: u32 = 26;
pub const IFE_PHY_SPECIAL_CONTROL_LED: u32 = 27;
pub const IFE_PHY_MDIX_CONTROL: u32 = 28;
pub const IFE_PHY_HWI_CONTROL: u32 = 29;
pub const IFE_PESC_REDUCED_POWER_DOWN_DISABLE: u32 = 8192;
pub const IFE_PESC_100BTX_POWER_DOWN: u32 = 1024;
pub const IFE_PESC_10BTX_POWER_DOWN: u32 = 512;
pub const IFE_PESC_POLARITY_REVERSED: u32 = 256;
pub const IFE_PESC_PHY_ADDR_MASK: u32 = 124;
pub const IFE_PESC_SPEED: u32 = 2;
pub const IFE_PESC_DUPLEX: u32 = 1;
pub const IFE_PESC_POLARITY_REVERSED_SHIFT: u32 = 8;
pub const IFE_PSC_DISABLE_DYNAMIC_POWER_DOWN: u32 = 256;
pub const IFE_PSC_FORCE_POLARITY: u32 = 32;
pub const IFE_PSC_AUTO_POLARITY_DISABLE: u32 = 16;
pub const IFE_PSC_JABBER_FUNC_DISABLE: u32 = 1;
pub const IFE_PSC_FORCE_POLARITY_SHIFT: u32 = 5;
pub const IFE_PSC_AUTO_POLARITY_DISABLE_SHIFT: u32 = 4;
pub const IFE_PMC_AUTO_MDIX: u32 = 128;
pub const IFE_PMC_FORCE_MDIX: u32 = 64;
pub const IFE_PMC_MDIX_STATUS: u32 = 32;
pub const IFE_PMC_AUTO_MDIX_COMPLETE: u32 = 16;
pub const IFE_PMC_MDIX_MODE_SHIFT: u32 = 6;
pub const IFE_PHC_MDIX_RESET_ALL_MASK: u32 = 0;
pub const IFE_PHC_HWI_ENABLE: u32 = 32768;
pub const IFE_PHC_ABILITY_CHECK: u32 = 16384;
pub const IFE_PHC_TEST_EXEC: u32 = 8192;
pub const IFE_PHC_HIGHZ: u32 = 512;
pub const IFE_PHC_LOWZ: u32 = 1024;
pub const IFE_PHC_LOW_HIGH_Z_MASK: u32 = 1536;
pub const IFE_PHC_DISTANCE_MASK: u32 = 511;
pub const IFE_PHC_RESET_ALL_MASK: u32 = 0;
pub const IFE_PSCL_PROBE_MODE: u32 = 32;
pub const IFE_PSCL_PROBE_LEDS_OFF: u32 = 6;
pub const IFE_PSCL_PROBE_LEDS_ON: u32 = 7;
pub const ICH_FLASH_COMMAND_TIMEOUT: u32 = 5000;
pub const ICH_FLASH_ERASE_TIMEOUT: u32 = 3000000;
pub const ICH_FLASH_CYCLE_REPEAT_COUNT: u32 = 10;
pub const ICH_FLASH_SEG_SIZE_256: u32 = 256;
pub const ICH_FLASH_SEG_SIZE_4K: u32 = 4096;
pub const ICH_FLASH_SEG_SIZE_64K: u32 = 65536;
pub const ICH_CYCLE_READ: u32 = 0;
pub const ICH_CYCLE_RESERVED: u32 = 1;
pub const ICH_CYCLE_WRITE: u32 = 2;
pub const ICH_CYCLE_ERASE: u32 = 3;
pub const ICH_FLASH_GFPREG: u32 = 0;
pub const ICH_FLASH_HSFSTS: u32 = 4;
pub const ICH_FLASH_HSFCTL: u32 = 6;
pub const ICH_FLASH_FADDR: u32 = 8;
pub const ICH_FLASH_FDATA0: u32 = 16;
pub const ICH_FLASH_FRACC: u32 = 80;
pub const ICH_FLASH_FREG0: u32 = 84;
pub const ICH_FLASH_FREG1: u32 = 88;
pub const ICH_FLASH_FREG2: u32 = 92;
pub const ICH_FLASH_FREG3: u32 = 96;
pub const ICH_FLASH_FPR0: u32 = 116;
pub const ICH_FLASH_FPR1: u32 = 120;
pub const ICH_FLASH_SSFSTS: u32 = 144;
pub const ICH_FLASH_SSFCTL: u32 = 146;
pub const ICH_FLASH_PREOP: u32 = 148;
pub const ICH_FLASH_OPTYPE: u32 = 150;
pub const ICH_FLASH_OPMENU: u32 = 152;
pub const ICH_FLASH_REG_MAPSIZE: u32 = 160;
pub const ICH_FLASH_SECTOR_SIZE: u32 = 4096;
pub const ICH_GFPREG_BASE_MASK: u32 = 8191;
pub const ICH_FLASH_LINEAR_ADDR_MASK: u32 = 16777215;
pub const PHY_PREAMBLE: u32 = 4294967295;
pub const PHY_SOF: u32 = 1;
pub const PHY_OP_READ: u32 = 2;
pub const PHY_OP_WRITE: u32 = 1;
pub const PHY_TURNAROUND: u32 = 2;
pub const PHY_PREAMBLE_SIZE: u32 = 32;
pub const MII_CR_SPEED_1000: u32 = 64;
pub const MII_CR_SPEED_100: u32 = 8192;
pub const MII_CR_SPEED_10: u32 = 0;
pub const E1000_PHY_ADDRESS: u32 = 1;
pub const PHY_AUTO_NEG_TIME: u32 = 45;
pub const PHY_FORCE_TIME: u32 = 20;
pub const PHY_REVISION_MASK: u32 = 4294967280;
pub const DEVICE_SPEED_MASK: u32 = 768;
pub const REG4_SPEED_MASK: u32 = 480;
pub const REG9_SPEED_MASK: u32 = 768;
pub const ADVERTISE_10_HALF: u32 = 1;
pub const ADVERTISE_10_FULL: u32 = 2;
pub const ADVERTISE_100_HALF: u32 = 4;
pub const ADVERTISE_100_FULL: u32 = 8;
pub const ADVERTISE_1000_HALF: u32 = 16;
pub const ADVERTISE_1000_FULL: u32 = 32;
pub const AUTONEG_ADVERTISE_SPEED_DEFAULT: u32 = 47;
pub const AUTONEG_ADVERTISE_10_100_ALL: u32 = 15;
pub const AUTONEG_ADVERTISE_10_ALL: u32 = 3;








pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;

pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}

#[test]
fn bindgen_test_layout_rb_node() {
    assert_eq!(
        ::std::mem::size_of::<rb_node>(),
        24usize,
        concat!("Size of: ", stringify!(rb_node))
    );
    assert_eq!(
        ::std::mem::align_of::<rb_node>(),
        8usize,
        concat!("Alignment of ", stringify!(rb_node))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rb_node>())).__rb_parent_color as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rb_node),
            "::",
            stringify!(__rb_parent_color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rb_node>())).rb_right as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rb_node),
            "::",
            stringify!(rb_right)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rb_node>())).rb_left as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rb_node),
            "::",
            stringify!(rb_left)
        )
    );
}

#[test]
fn bindgen_test_layout_rb_root() {
    assert_eq!(
        ::std::mem::size_of::<rb_root>(),
        8usize,
        concat!("Size of: ", stringify!(rb_root))
    );
    assert_eq!(
        ::std::mem::align_of::<rb_root>(),
        8usize,
        concat!("Alignment of ", stringify!(rb_root))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rb_root>())).rb_node as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rb_root),
            "::",
            stringify!(rb_node)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_augment_callbacks {
    pub propagate:
        ::std::option::Option<unsafe extern "C" fn(node: *mut rb_node, stop: *mut rb_node)>,
    pub copy: ::std::option::Option<unsafe extern "C" fn(old: *mut rb_node, new_: *mut rb_node)>,
    pub rotate: ::std::option::Option<unsafe extern "C" fn(old: *mut rb_node, new_: *mut rb_node)>,
}
#[test]
fn bindgen_test_layout_rb_augment_callbacks() {
    assert_eq!(
        ::std::mem::size_of::<rb_augment_callbacks>(),
        24usize,
        concat!("Size of: ", stringify!(rb_augment_callbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<rb_augment_callbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(rb_augment_callbacks))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rb_augment_callbacks>())).propagate as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rb_augment_callbacks),
            "::",
            stringify!(propagate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rb_augment_callbacks>())).copy as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rb_augment_callbacks),
            "::",
            stringify!(copy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rb_augment_callbacks>())).rotate as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rb_augment_callbacks),
            "::",
            stringify!(rotate)
        )
    );
}
extern "C" {
    pub static dummy_callbacks: rb_augment_callbacks;
}
extern "C" {
    pub fn rb_next(node: *const rb_node) -> *mut rb_node;
}
extern "C" {
    pub fn rb_erase(node: *mut rb_node, root: *mut rb_root);
}
extern "C" {
    pub fn rb_insert_color(node: *mut rb_node, root: *mut rb_root);
}

#[test]
fn bindgen_test_layout_atomic_t() {
    assert_eq!(
        ::std::mem::size_of::<atomic_t>(),
        4usize,
        concat!("Size of: ", stringify!(atomic_t))
    );
    assert_eq!(
        ::std::mem::align_of::<atomic_t>(),
        4usize,
        concat!("Alignment of ", stringify!(atomic_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<atomic_t>())).counter as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(atomic_t),
            "::",
            stringify!(counter)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct atomic64_t {
    pub counter: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_atomic64_t() {
    assert_eq!(
        ::std::mem::size_of::<atomic64_t>(),
        8usize,
        concat!("Size of: ", stringify!(atomic64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<atomic64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(atomic64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<atomic64_t>())).counter as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(atomic64_t),
            "::",
            stringify!(counter)
        )
    );
}
pub type atomic_long_t = atomic64_t;


#[test]
fn bindgen_test_layout_seqcount() {
    assert_eq!(
        ::std::mem::size_of::<seqcount>(),
        4usize,
        concat!("Size of: ", stringify!(seqcount))
    );
    assert_eq!(
        ::std::mem::align_of::<seqcount>(),
        4usize,
        concat!("Alignment of ", stringify!(seqcount))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<seqcount>())).sequence as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(seqcount),
            "::",
            stringify!(sequence)
        )
    );
}

#[test]
fn bindgen_test_layout_timerqueue_node() {
    assert_eq!(
        ::std::mem::size_of::<timerqueue_node>(),
        32usize,
        concat!("Size of: ", stringify!(timerqueue_node))
    );
    assert_eq!(
        ::std::mem::align_of::<timerqueue_node>(),
        8usize,
        concat!("Alignment of ", stringify!(timerqueue_node))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timerqueue_node>())).node as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timerqueue_node),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timerqueue_node>())).expires as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(timerqueue_node),
            "::",
            stringify!(expires)
        )
    );
}

#[test]
fn bindgen_test_layout_timerqueue_head() {
    assert_eq!(
        ::std::mem::size_of::<timerqueue_head>(),
        16usize,
        concat!("Size of: ", stringify!(timerqueue_head))
    );
    assert_eq!(
        ::std::mem::align_of::<timerqueue_head>(),
        8usize,
        concat!("Alignment of ", stringify!(timerqueue_head))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timerqueue_head>())).head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timerqueue_head),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timerqueue_head>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timerqueue_head),
            "::",
            stringify!(next)
        )
    );
}



#[test]
fn bindgen_test_layout_qspinlock__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<qspinlock__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(qspinlock__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<qspinlock__bindgen_ty_1__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(qspinlock__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<qspinlock__bindgen_ty_1__bindgen_ty_1>())).locked as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(qspinlock__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(locked)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<qspinlock__bindgen_ty_1__bindgen_ty_1>())).pending as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(qspinlock__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(pending)
        )
    );
}

#[test]
fn bindgen_test_layout_qspinlock__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<qspinlock__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(qspinlock__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<qspinlock__bindgen_ty_1__bindgen_ty_2>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(qspinlock__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<qspinlock__bindgen_ty_1__bindgen_ty_2>())).locked_pending
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(qspinlock__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(locked_pending)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<qspinlock__bindgen_ty_1__bindgen_ty_2>())).tail as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(qspinlock__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(tail)
        )
    );
}
#[test]
fn bindgen_test_layout_qspinlock__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<qspinlock__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(qspinlock__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<qspinlock__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(qspinlock__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<qspinlock__bindgen_ty_1>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(qspinlock__bindgen_ty_1),
            "::",
            stringify!(val)
        )
    );
}
#[test]
fn bindgen_test_layout_qspinlock() {
    assert_eq!(
        ::std::mem::size_of::<qspinlock>(),
        4usize,
        concat!("Size of: ", stringify!(qspinlock))
    );
    assert_eq!(
        ::std::mem::align_of::<qspinlock>(),
        4usize,
        concat!("Alignment of ", stringify!(qspinlock))
    );
}


#[test]
fn bindgen_test_layout_raw_spinlock() {
    assert_eq!(
        ::std::mem::size_of::<raw_spinlock>(),
        4usize,
        concat!("Size of: ", stringify!(raw_spinlock))
    );
    assert_eq!(
        ::std::mem::align_of::<raw_spinlock>(),
        4usize,
        concat!("Alignment of ", stringify!(raw_spinlock))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<raw_spinlock>())).raw_lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(raw_spinlock),
            "::",
            stringify!(raw_lock)
        )
    );
}

#[test]
fn bindgen_test_layout_list_head() {
    assert_eq!(
        ::std::mem::size_of::<list_head>(),
        16usize,
        concat!("Size of: ", stringify!(list_head))
    );
    assert_eq!(
        ::std::mem::align_of::<list_head>(),
        8usize,
        concat!("Alignment of ", stringify!(list_head))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<list_head>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(list_head),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<list_head>())).prev as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(list_head),
            "::",
            stringify!(prev)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct work_struct {
    _unused: [u8; 0],
}
pub type work_func_t = ::std::option::Option<unsafe extern "C" fn(work: *mut work_struct)>;

#[test]
fn bindgen_test_layout_hlist_head() {
    assert_eq!(
        ::std::mem::size_of::<hlist_head>(),
        8usize,
        concat!("Size of: ", stringify!(hlist_head))
    );
    assert_eq!(
        ::std::mem::align_of::<hlist_head>(),
        8usize,
        concat!("Alignment of ", stringify!(hlist_head))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hlist_head>())).first as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hlist_head),
            "::",
            stringify!(first)
        )
    );
}

#[test]
fn bindgen_test_layout_hlist_node() {
    assert_eq!(
        ::std::mem::size_of::<hlist_node>(),
        16usize,
        concat!("Size of: ", stringify!(hlist_node))
    );
    assert_eq!(
        ::std::mem::align_of::<hlist_node>(),
        8usize,
        concat!("Alignment of ", stringify!(hlist_node))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hlist_node>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hlist_node),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hlist_node>())).pprev as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hlist_node),
            "::",
            stringify!(pprev)
        )
    );
}
pub const hrtimer_base_type_HRTIMER_BASE_MONOTONIC: hrtimer_base_type = 0;
pub const hrtimer_base_type_HRTIMER_BASE_REALTIME: hrtimer_base_type = 1;
pub const hrtimer_base_type_HRTIMER_BASE_BOOTTIME: hrtimer_base_type = 2;
pub const hrtimer_base_type_HRTIMER_BASE_TAI: hrtimer_base_type = 3;
pub const hrtimer_base_type_HRTIMER_BASE_MONOTONIC_SOFT: hrtimer_base_type = 4;
pub const hrtimer_base_type_HRTIMER_BASE_REALTIME_SOFT: hrtimer_base_type = 5;
pub const hrtimer_base_type_HRTIMER_BASE_BOOTTIME_SOFT: hrtimer_base_type = 6;
pub const hrtimer_base_type_HRTIMER_BASE_TAI_SOFT: hrtimer_base_type = 7;
pub const hrtimer_base_type_HRTIMER_MAX_CLOCK_BASES: hrtimer_base_type = 8;
pub type hrtimer_base_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timer_list {
    pub entry: hlist_node,
    pub expires: ::std::os::raw::c_ulong,
    pub function: ::std::option::Option<unsafe extern "C" fn(arg1: *mut timer_list)>,
    pub flags: u32,
}
#[test]
fn bindgen_test_layout_timer_list() {
    assert_eq!(
        ::std::mem::size_of::<timer_list>(),
        40usize,
        concat!("Size of: ", stringify!(timer_list))
    );
    assert_eq!(
        ::std::mem::align_of::<timer_list>(),
        8usize,
        concat!("Alignment of ", stringify!(timer_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timer_list>())).entry as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timer_list),
            "::",
            stringify!(entry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timer_list>())).expires as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(timer_list),
            "::",
            stringify!(expires)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timer_list>())).function as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(timer_list),
            "::",
            stringify!(function)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timer_list>())).flags as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(timer_list),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct delayed_work {
    pub work: work_struct,
    pub __bindgen_padding_0: [u64; 4usize],
    pub timer: timer_list,
    pub wq: *mut workqueue_struct,
    pub cpu: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_delayed_work() {
    assert_eq!(
        ::std::mem::size_of::<delayed_work>(),
        88usize,
        concat!("Size of: ", stringify!(delayed_work))
    );
    assert_eq!(
        ::std::mem::align_of::<delayed_work>(),
        8usize,
        concat!("Alignment of ", stringify!(delayed_work))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<delayed_work>())).work as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(delayed_work),
            "::",
            stringify!(work)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<delayed_work>())).timer as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(delayed_work),
            "::",
            stringify!(timer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<delayed_work>())).wq as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(delayed_work),
            "::",
            stringify!(wq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<delayed_work>())).cpu as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(delayed_work),
            "::",
            stringify!(cpu)
        )
    );
}

#[test]
fn bindgen_test_layout_spinlock_t() {
    assert_eq!(
        ::std::mem::size_of::<spinlock_t>(),
        48usize,
        concat!("Size of: ", stringify!(spinlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<spinlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(spinlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spinlock_t>())).magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(spinlock_t),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spinlock_t>())).lock as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(spinlock_t),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spinlock_t>())).babble as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(spinlock_t),
            "::",
            stringify!(babble)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spinlock_t>())).module as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(spinlock_t),
            "::",
            stringify!(module)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spinlock_t>())).owner as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(spinlock_t),
            "::",
            stringify!(owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spinlock_t>())).oline as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(spinlock_t),
            "::",
            stringify!(oline)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mutex {
    pub owner: atomic_long_t,
    pub wait_lock: spinlock_t,
    pub wait_list: list_head,
}
#[test]
fn bindgen_test_layout_mutex() {
    assert_eq!(
        ::std::mem::size_of::<mutex>(),
        72usize,
        concat!("Size of: ", stringify!(mutex))
    );
    assert_eq!(
        ::std::mem::align_of::<mutex>(),
        8usize,
        concat!("Alignment of ", stringify!(mutex))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mutex>())).owner as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mutex),
            "::",
            stringify!(owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mutex>())).wait_lock as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mutex),
            "::",
            stringify!(wait_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mutex>())).wait_list as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mutex),
            "::",
            stringify!(wait_list)
        )
    );
}

#[test]
fn bindgen_test_layout_hrtimer_clock_base() {
    assert_eq!(
        ::std::mem::size_of::<hrtimer_clock_base>(),
        64usize,
        concat!("Size of: ", stringify!(hrtimer_clock_base))
    );
    assert_eq!(
        ::std::mem::align_of::<hrtimer_clock_base>(),
        8usize,
        concat!("Alignment of ", stringify!(hrtimer_clock_base))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hrtimer_clock_base>())).cpu_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hrtimer_clock_base),
            "::",
            stringify!(cpu_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hrtimer_clock_base>())).index as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hrtimer_clock_base),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hrtimer_clock_base>())).clockid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(hrtimer_clock_base),
            "::",
            stringify!(clockid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hrtimer_clock_base>())).seq as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hrtimer_clock_base),
            "::",
            stringify!(seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hrtimer_clock_base>())).running as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hrtimer_clock_base),
            "::",
            stringify!(running)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hrtimer_clock_base>())).active as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(hrtimer_clock_base),
            "::",
            stringify!(active)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hrtimer_clock_base>())).get_time as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(hrtimer_clock_base),
            "::",
            stringify!(get_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hrtimer_clock_base>())).offset as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(hrtimer_clock_base),
            "::",
            stringify!(offset)
        )
    );
}
extern "C" {
    pub static mut __hrtimer_clock_base_align: hrtimer_clock_base;
}

#[test]
fn bindgen_test_layout_hrtimer_cpu_base() {
    assert_eq!(
        ::std::mem::size_of::<hrtimer_cpu_base>(),
        568usize,
        concat!("Size of: ", stringify!(hrtimer_cpu_base))
    );
    assert_eq!(
        ::std::mem::align_of::<hrtimer_cpu_base>(),
        8usize,
        concat!("Alignment of ", stringify!(hrtimer_cpu_base))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hrtimer_cpu_base>())).lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hrtimer_cpu_base),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hrtimer_cpu_base>())).cpu as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hrtimer_cpu_base),
            "::",
            stringify!(cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hrtimer_cpu_base>())).active_bases as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hrtimer_cpu_base),
            "::",
            stringify!(active_bases)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hrtimer_cpu_base>())).clock_was_set_seq as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(hrtimer_cpu_base),
            "::",
            stringify!(clock_was_set_seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hrtimer_cpu_base>())).expires_next as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hrtimer_cpu_base),
            "::",
            stringify!(expires_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hrtimer_cpu_base>())).next_timer as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(hrtimer_cpu_base),
            "::",
            stringify!(next_timer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hrtimer_cpu_base>())).softirq_expires_next as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(hrtimer_cpu_base),
            "::",
            stringify!(softirq_expires_next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hrtimer_cpu_base>())).softirq_next_timer as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(hrtimer_cpu_base),
            "::",
            stringify!(softirq_next_timer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hrtimer_cpu_base>())).clock_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(hrtimer_cpu_base),
            "::",
            stringify!(clock_base)
        )
    );
}
impl hrtimer_cpu_base {
    #[inline]
    pub fn hres_active(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_hres_active(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn in_hrtirq(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_in_hrtirq(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn hang_detected(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_hang_detected(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn softirq_activated(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_softirq_activated(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        hres_active: ::std::os::raw::c_uint,
        in_hrtirq: ::std::os::raw::c_uint,
        hang_detected: ::std::os::raw::c_uint,
        softirq_activated: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let hres_active: u32 = unsafe { ::std::mem::transmute(hres_active) };
            hres_active as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let in_hrtirq: u32 = unsafe { ::std::mem::transmute(in_hrtirq) };
            in_hrtirq as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let hang_detected: u32 = unsafe { ::std::mem::transmute(hang_detected) };
            hang_detected as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let softirq_activated: u32 = unsafe { ::std::mem::transmute(softirq_activated) };
            softirq_activated as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub static mut ____cacheline_aligned: hrtimer_cpu_base;
}
extern "C" {
    pub static mut migration_cpu_base: hrtimer_cpu_base;
}
pub const hrtimer_mode_HRTIMER_MODE_ABS: hrtimer_mode = 0;
pub const hrtimer_mode_HRTIMER_MODE_REL: hrtimer_mode = 1;
pub const hrtimer_mode_HRTIMER_MODE_PINNED: hrtimer_mode = 2;
pub const hrtimer_mode_HRTIMER_MODE_SOFT: hrtimer_mode = 4;
pub const hrtimer_mode_HRTIMER_MODE_ABS_PINNED: hrtimer_mode = 2;
pub const hrtimer_mode_HRTIMER_MODE_REL_PINNED: hrtimer_mode = 3;
pub const hrtimer_mode_HRTIMER_MODE_ABS_SOFT: hrtimer_mode = 4;
pub const hrtimer_mode_HRTIMER_MODE_REL_SOFT: hrtimer_mode = 5;
pub const hrtimer_mode_HRTIMER_MODE_ABS_PINNED_SOFT: hrtimer_mode = 6;
pub const hrtimer_mode_HRTIMER_MODE_REL_PINNED_SOFT: hrtimer_mode = 7;
pub type hrtimer_mode = ::std::os::raw::c_uint;

#[test]
fn bindgen_test_layout_hrtimer() {
    assert_eq!(
        ::std::mem::size_of::<hrtimer>(),
        64usize,
        concat!("Size of: ", stringify!(hrtimer))
    );
    assert_eq!(
        ::std::mem::align_of::<hrtimer>(),
        8usize,
        concat!("Alignment of ", stringify!(hrtimer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hrtimer>())).node as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hrtimer),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hrtimer>()))._softexpires as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(hrtimer),
            "::",
            stringify!(_softexpires)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hrtimer>())).function as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(hrtimer),
            "::",
            stringify!(function)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hrtimer>())).base as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(hrtimer),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hrtimer>())).state as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(hrtimer),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hrtimer>())).is_rel as *const _ as usize },
        57usize,
        concat!(
            "Offset of field: ",
            stringify!(hrtimer),
            "::",
            stringify!(is_rel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hrtimer>())).is_soft as *const _ as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(hrtimer),
            "::",
            stringify!(is_soft)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hrtimer>())).is_hard as *const _ as usize },
        59usize,
        concat!(
            "Offset of field: ",
            stringify!(hrtimer),
            "::",
            stringify!(is_hard)
        )
    );
}
extern "C" {
    pub fn timerqueue_iterate_next(node: *mut timerqueue_node) -> *mut timerqueue_node;
}
extern "C" {
    #[doc = " timerqueue_del - Removes a timer from the timerqueue."]
    #[doc = ""]
    #[doc = " @head: head of timerqueue"]
    #[doc = " @node: timer node to be removed"]
    #[doc = ""]
    #[doc = " Removes the timer node from the timerqueue. Returns true if the queue is"]
    #[doc = " not empty after the remove."]
    pub fn timerqueue_del(head: *mut timerqueue_head, node: *mut timerqueue_node) -> bool;
}
extern "C" {
    pub fn ktime_add_safe(lhs: ktime_t, rhs: ktime_t) -> ktime_t;
}
extern "C" {
    pub fn hrtimer_start_range_ns(
        timer: *mut hrtimer,
        tim: ktime_t,
        delta_ns: u64,
        mode: hrtimer_mode,
    );
}
pub type __s8 = ::std::os::raw::c_schar;
pub type __s16 = ::std::os::raw::c_short;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __le16 = __uint16_t;
pub type __be16 = __uint16_t;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __uint64_t;
pub type __be64 = __uint64_t;
pub type __sum16 = __uint16_t;
pub type __wsum = __u32;
pub type dma_addr_t = u32;

#[test]
fn bindgen_test_layout_gro_list() {
    assert_eq!(
        ::std::mem::size_of::<gro_list>(),
        24usize,
        concat!("Size of: ", stringify!(gro_list))
    );
    assert_eq!(
        ::std::mem::align_of::<gro_list>(),
        8usize,
        concat!("Alignment of ", stringify!(gro_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gro_list>())).list as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gro_list),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gro_list>())).count as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(gro_list),
            "::",
            stringify!(count)
        )
    );
}

#[test]
fn bindgen_test_layout_napi_struct() {
    assert_eq!(
        ::std::mem::size_of::<napi_struct>(),
        384usize,
        concat!("Size of: ", stringify!(napi_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<napi_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(napi_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<napi_struct>())).poll_list as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(napi_struct),
            "::",
            stringify!(poll_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<napi_struct>())).state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(napi_struct),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<napi_struct>())).weight as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(napi_struct),
            "::",
            stringify!(weight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<napi_struct>())).defer_hard_irqs_count as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(napi_struct),
            "::",
            stringify!(defer_hard_irqs_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<napi_struct>())).gro_bitmask as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(napi_struct),
            "::",
            stringify!(gro_bitmask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<napi_struct>())).poll as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(napi_struct),
            "::",
            stringify!(poll)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<napi_struct>())).dev as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(napi_struct),
            "::",
            stringify!(dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<napi_struct>())).gro_hash as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(napi_struct),
            "::",
            stringify!(gro_hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<napi_struct>())).skb as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(napi_struct),
            "::",
            stringify!(skb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<napi_struct>())).rx_list as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(napi_struct),
            "::",
            stringify!(rx_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<napi_struct>())).rx_count as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(napi_struct),
            "::",
            stringify!(rx_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<napi_struct>())).timer as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(napi_struct),
            "::",
            stringify!(timer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<napi_struct>())).dev_list as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(napi_struct),
            "::",
            stringify!(dev_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<napi_struct>())).napi_hash_node as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(napi_struct),
            "::",
            stringify!(napi_hash_node)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<napi_struct>())).napi_id as *const _ as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(napi_struct),
            "::",
            stringify!(napi_id)
        )
    );
}
pub const e1000_mac_type_e1000_undefined: e1000_mac_type = 0;
pub const e1000_mac_type_e1000_82542_rev2_0: e1000_mac_type = 1;
pub const e1000_mac_type_e1000_82542_rev2_1: e1000_mac_type = 2;
pub const e1000_mac_type_e1000_82543: e1000_mac_type = 3;
pub const e1000_mac_type_e1000_82544: e1000_mac_type = 4;
pub const e1000_mac_type_e1000_82540: e1000_mac_type = 5;
pub const e1000_mac_type_e1000_82545: e1000_mac_type = 6;
pub const e1000_mac_type_e1000_82545_rev_3: e1000_mac_type = 7;
pub const e1000_mac_type_e1000_82546: e1000_mac_type = 8;
pub const e1000_mac_type_e1000_ce4100: e1000_mac_type = 9;
pub const e1000_mac_type_e1000_82546_rev_3: e1000_mac_type = 10;
pub const e1000_mac_type_e1000_82541: e1000_mac_type = 11;
pub const e1000_mac_type_e1000_82541_rev_2: e1000_mac_type = 12;
pub const e1000_mac_type_e1000_82547: e1000_mac_type = 13;
pub const e1000_mac_type_e1000_82547_rev_2: e1000_mac_type = 14;
pub const e1000_mac_type_e1000_num_macs: e1000_mac_type = 15;
pub type e1000_mac_type = ::std::os::raw::c_uint;
pub const e1000_eeprom_type_e1000_eeprom_uninitialized: e1000_eeprom_type = 0;
pub const e1000_eeprom_type_e1000_eeprom_spi: e1000_eeprom_type = 1;
pub const e1000_eeprom_type_e1000_eeprom_microwire: e1000_eeprom_type = 2;
pub const e1000_eeprom_type_e1000_eeprom_flash: e1000_eeprom_type = 3;
pub const e1000_eeprom_type_e1000_eeprom_none: e1000_eeprom_type = 4;
pub const e1000_eeprom_type_e1000_num_eeprom_types: e1000_eeprom_type = 5;
pub type e1000_eeprom_type = ::std::os::raw::c_uint;
pub const e1000_media_type_e1000_media_type_copper: e1000_media_type = 0;
pub const e1000_media_type_e1000_media_type_fiber: e1000_media_type = 1;
pub const e1000_media_type_e1000_media_type_internal_serdes: e1000_media_type = 2;
pub const e1000_media_type_e1000_num_media_types: e1000_media_type = 3;
pub type e1000_media_type = ::std::os::raw::c_uint;
pub const e1000_speed_duplex_type_e1000_10_half: e1000_speed_duplex_type = 0;
pub const e1000_speed_duplex_type_e1000_10_full: e1000_speed_duplex_type = 1;
pub const e1000_speed_duplex_type_e1000_100_half: e1000_speed_duplex_type = 2;
pub const e1000_speed_duplex_type_e1000_100_full: e1000_speed_duplex_type = 3;
pub type e1000_speed_duplex_type = ::std::os::raw::c_uint;
pub const e1000_fc_type_E1000_FC_NONE: e1000_fc_type = 0;
pub const e1000_fc_type_E1000_FC_RX_PAUSE: e1000_fc_type = 1;
pub const e1000_fc_type_E1000_FC_TX_PAUSE: e1000_fc_type = 2;
pub const e1000_fc_type_E1000_FC_FULL: e1000_fc_type = 3;
pub const e1000_fc_type_E1000_FC_DEFAULT: e1000_fc_type = 255;
pub type e1000_fc_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct e1000_shadow_ram {
    pub eeprom_word: u16,
    pub modified: bool,
}
#[test]
fn bindgen_test_layout_e1000_shadow_ram() {
    assert_eq!(
        ::std::mem::size_of::<e1000_shadow_ram>(),
        4usize,
        concat!("Size of: ", stringify!(e1000_shadow_ram))
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_shadow_ram>(),
        2usize,
        concat!("Alignment of ", stringify!(e1000_shadow_ram))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_shadow_ram>())).eeprom_word as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_shadow_ram),
            "::",
            stringify!(eeprom_word)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_shadow_ram>())).modified as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_shadow_ram),
            "::",
            stringify!(modified)
        )
    );
}
pub const e1000_bus_type_e1000_bus_type_unknown: e1000_bus_type = 0;
pub const e1000_bus_type_e1000_bus_type_pci: e1000_bus_type = 1;
pub const e1000_bus_type_e1000_bus_type_pcix: e1000_bus_type = 2;
pub const e1000_bus_type_e1000_bus_type_reserved: e1000_bus_type = 3;
pub type e1000_bus_type = ::std::os::raw::c_uint;
pub const e1000_bus_speed_e1000_bus_speed_unknown: e1000_bus_speed = 0;
pub const e1000_bus_speed_e1000_bus_speed_33: e1000_bus_speed = 1;
pub const e1000_bus_speed_e1000_bus_speed_66: e1000_bus_speed = 2;
pub const e1000_bus_speed_e1000_bus_speed_100: e1000_bus_speed = 3;
pub const e1000_bus_speed_e1000_bus_speed_120: e1000_bus_speed = 4;
pub const e1000_bus_speed_e1000_bus_speed_133: e1000_bus_speed = 5;
pub const e1000_bus_speed_e1000_bus_speed_reserved: e1000_bus_speed = 6;
pub type e1000_bus_speed = ::std::os::raw::c_uint;
pub const e1000_bus_width_e1000_bus_width_unknown: e1000_bus_width = 0;
pub const e1000_bus_width_e1000_bus_width_32: e1000_bus_width = 1;
pub const e1000_bus_width_e1000_bus_width_64: e1000_bus_width = 2;
pub const e1000_bus_width_e1000_bus_width_reserved: e1000_bus_width = 3;
pub type e1000_bus_width = ::std::os::raw::c_uint;
pub const e1000_cable_length_e1000_cable_length_50: e1000_cable_length = 0;
pub const e1000_cable_length_e1000_cable_length_50_80: e1000_cable_length = 1;
pub const e1000_cable_length_e1000_cable_length_80_110: e1000_cable_length = 2;
pub const e1000_cable_length_e1000_cable_length_110_140: e1000_cable_length = 3;
pub const e1000_cable_length_e1000_cable_length_140: e1000_cable_length = 4;
pub const e1000_cable_length_e1000_cable_length_undefined: e1000_cable_length = 255;
pub type e1000_cable_length = ::std::os::raw::c_uint;
pub const e1000_gg_cable_length_e1000_gg_cable_length_60: e1000_gg_cable_length = 0;
pub const e1000_gg_cable_length_e1000_gg_cable_length_60_115: e1000_gg_cable_length = 1;
pub const e1000_gg_cable_length_e1000_gg_cable_length_115_150: e1000_gg_cable_length = 2;
pub const e1000_gg_cable_length_e1000_gg_cable_length_150: e1000_gg_cable_length = 4;
pub type e1000_gg_cable_length = ::std::os::raw::c_uint;
pub const e1000_igp_cable_length_e1000_igp_cable_length_10: e1000_igp_cable_length = 10;
pub const e1000_igp_cable_length_e1000_igp_cable_length_20: e1000_igp_cable_length = 20;
pub const e1000_igp_cable_length_e1000_igp_cable_length_30: e1000_igp_cable_length = 30;
pub const e1000_igp_cable_length_e1000_igp_cable_length_40: e1000_igp_cable_length = 40;
pub const e1000_igp_cable_length_e1000_igp_cable_length_50: e1000_igp_cable_length = 50;
pub const e1000_igp_cable_length_e1000_igp_cable_length_60: e1000_igp_cable_length = 60;
pub const e1000_igp_cable_length_e1000_igp_cable_length_70: e1000_igp_cable_length = 70;
pub const e1000_igp_cable_length_e1000_igp_cable_length_80: e1000_igp_cable_length = 80;
pub const e1000_igp_cable_length_e1000_igp_cable_length_90: e1000_igp_cable_length = 90;
pub const e1000_igp_cable_length_e1000_igp_cable_length_100: e1000_igp_cable_length = 100;
pub const e1000_igp_cable_length_e1000_igp_cable_length_110: e1000_igp_cable_length = 110;
pub const e1000_igp_cable_length_e1000_igp_cable_length_115: e1000_igp_cable_length = 115;
pub const e1000_igp_cable_length_e1000_igp_cable_length_120: e1000_igp_cable_length = 120;
pub const e1000_igp_cable_length_e1000_igp_cable_length_130: e1000_igp_cable_length = 130;
pub const e1000_igp_cable_length_e1000_igp_cable_length_140: e1000_igp_cable_length = 140;
pub const e1000_igp_cable_length_e1000_igp_cable_length_150: e1000_igp_cable_length = 150;
pub const e1000_igp_cable_length_e1000_igp_cable_length_160: e1000_igp_cable_length = 160;
pub const e1000_igp_cable_length_e1000_igp_cable_length_170: e1000_igp_cable_length = 170;
pub const e1000_igp_cable_length_e1000_igp_cable_length_180: e1000_igp_cable_length = 180;
pub type e1000_igp_cable_length = ::std::os::raw::c_uint;
pub const e1000_10bt_ext_dist_enable_e1000_10bt_ext_dist_enable_normal: e1000_10bt_ext_dist_enable =
    0;
pub const e1000_10bt_ext_dist_enable_e1000_10bt_ext_dist_enable_lower: e1000_10bt_ext_dist_enable =
    1;
pub const e1000_10bt_ext_dist_enable_e1000_10bt_ext_dist_enable_undefined:
    e1000_10bt_ext_dist_enable = 255;
pub type e1000_10bt_ext_dist_enable = ::std::os::raw::c_uint;
pub const e1000_rev_polarity_e1000_rev_polarity_normal: e1000_rev_polarity = 0;
pub const e1000_rev_polarity_e1000_rev_polarity_reversed: e1000_rev_polarity = 1;
pub const e1000_rev_polarity_e1000_rev_polarity_undefined: e1000_rev_polarity = 255;
pub type e1000_rev_polarity = ::std::os::raw::c_uint;
pub const e1000_downshift_e1000_downshift_normal: e1000_downshift = 0;
pub const e1000_downshift_e1000_downshift_activated: e1000_downshift = 1;
pub const e1000_downshift_e1000_downshift_undefined: e1000_downshift = 255;
pub type e1000_downshift = ::std::os::raw::c_uint;
pub const e1000_smart_speed_e1000_smart_speed_default: e1000_smart_speed = 0;
pub const e1000_smart_speed_e1000_smart_speed_on: e1000_smart_speed = 1;
pub const e1000_smart_speed_e1000_smart_speed_off: e1000_smart_speed = 2;
pub type e1000_smart_speed = ::std::os::raw::c_uint;
pub const e1000_polarity_reversal_e1000_polarity_reversal_enabled: e1000_polarity_reversal = 0;
pub const e1000_polarity_reversal_e1000_polarity_reversal_disabled: e1000_polarity_reversal = 1;
pub const e1000_polarity_reversal_e1000_polarity_reversal_undefined: e1000_polarity_reversal = 255;
pub type e1000_polarity_reversal = ::std::os::raw::c_uint;
pub const e1000_auto_x_mode_e1000_auto_x_mode_manual_mdi: e1000_auto_x_mode = 0;
pub const e1000_auto_x_mode_e1000_auto_x_mode_manual_mdix: e1000_auto_x_mode = 1;
pub const e1000_auto_x_mode_e1000_auto_x_mode_auto1: e1000_auto_x_mode = 2;
pub const e1000_auto_x_mode_e1000_auto_x_mode_auto2: e1000_auto_x_mode = 3;
pub const e1000_auto_x_mode_e1000_auto_x_mode_undefined: e1000_auto_x_mode = 255;
pub type e1000_auto_x_mode = ::std::os::raw::c_uint;
pub const e1000_1000t_rx_status_e1000_1000t_rx_status_not_ok: e1000_1000t_rx_status = 0;
pub const e1000_1000t_rx_status_e1000_1000t_rx_status_ok: e1000_1000t_rx_status = 1;
pub const e1000_1000t_rx_status_e1000_1000t_rx_status_undefined: e1000_1000t_rx_status = 255;
pub type e1000_1000t_rx_status = ::std::os::raw::c_uint;
pub const e1000_phy_type_e1000_phy_m88: e1000_phy_type = 0;
pub const e1000_phy_type_e1000_phy_igp: e1000_phy_type = 1;
pub const e1000_phy_type_e1000_phy_8211: e1000_phy_type = 2;
pub const e1000_phy_type_e1000_phy_8201: e1000_phy_type = 3;
pub const e1000_phy_type_e1000_phy_undefined: e1000_phy_type = 255;
pub type e1000_phy_type = ::std::os::raw::c_uint;
pub const e1000_ms_type_e1000_ms_hw_default: e1000_ms_type = 0;
pub const e1000_ms_type_e1000_ms_force_master: e1000_ms_type = 1;
pub const e1000_ms_type_e1000_ms_force_slave: e1000_ms_type = 2;
pub const e1000_ms_type_e1000_ms_auto: e1000_ms_type = 3;
pub type e1000_ms_type = ::std::os::raw::c_uint;
pub const e1000_ffe_config_e1000_ffe_config_enabled: e1000_ffe_config = 0;
pub const e1000_ffe_config_e1000_ffe_config_active: e1000_ffe_config = 1;
pub const e1000_ffe_config_e1000_ffe_config_blocked: e1000_ffe_config = 2;
pub type e1000_ffe_config = ::std::os::raw::c_uint;
pub const e1000_dsp_config_e1000_dsp_config_disabled: e1000_dsp_config = 0;
pub const e1000_dsp_config_e1000_dsp_config_enabled: e1000_dsp_config = 1;
pub const e1000_dsp_config_e1000_dsp_config_activated: e1000_dsp_config = 2;
pub const e1000_dsp_config_e1000_dsp_config_undefined: e1000_dsp_config = 255;
pub type e1000_dsp_config = ::std::os::raw::c_uint;

#[test]
fn bindgen_test_layout_e1000_phy_info() {
    assert_eq!(
        ::std::mem::size_of::<e1000_phy_info>(),
        32usize,
        concat!("Size of: ", stringify!(e1000_phy_info))
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_phy_info>(),
        4usize,
        concat!("Alignment of ", stringify!(e1000_phy_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_phy_info>())).cable_length as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_phy_info),
            "::",
            stringify!(cable_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_phy_info>())).extended_10bt_distance as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_phy_info),
            "::",
            stringify!(extended_10bt_distance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_phy_info>())).cable_polarity as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_phy_info),
            "::",
            stringify!(cable_polarity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_phy_info>())).downshift as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_phy_info),
            "::",
            stringify!(downshift)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_phy_info>())).polarity_correction as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_phy_info),
            "::",
            stringify!(polarity_correction)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_phy_info>())).mdix_mode as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_phy_info),
            "::",
            stringify!(mdix_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_phy_info>())).local_rx as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_phy_info),
            "::",
            stringify!(local_rx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_phy_info>())).remote_rx as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_phy_info),
            "::",
            stringify!(remote_rx)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct e1000_phy_stats {
    pub idle_errors: u32,
    pub receive_errors: u32,
}
#[test]
fn bindgen_test_layout_e1000_phy_stats() {
    assert_eq!(
        ::std::mem::size_of::<e1000_phy_stats>(),
        8usize,
        concat!("Size of: ", stringify!(e1000_phy_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_phy_stats>(),
        4usize,
        concat!("Alignment of ", stringify!(e1000_phy_stats))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_phy_stats>())).idle_errors as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_phy_stats),
            "::",
            stringify!(idle_errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_phy_stats>())).receive_errors as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_phy_stats),
            "::",
            stringify!(receive_errors)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct e1000_eeprom_info {
    pub type_: e1000_eeprom_type,
    pub word_size: u16,
    pub opcode_bits: u16,
    pub address_bits: u16,
    pub delay_usec: u16,
    pub page_size: u16,
}
#[test]
fn bindgen_test_layout_e1000_eeprom_info() {
    assert_eq!(
        ::std::mem::size_of::<e1000_eeprom_info>(),
        16usize,
        concat!("Size of: ", stringify!(e1000_eeprom_info))
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_eeprom_info>(),
        4usize,
        concat!("Alignment of ", stringify!(e1000_eeprom_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_eeprom_info>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_eeprom_info),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_eeprom_info>())).word_size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_eeprom_info),
            "::",
            stringify!(word_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_eeprom_info>())).opcode_bits as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_eeprom_info),
            "::",
            stringify!(opcode_bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_eeprom_info>())).address_bits as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_eeprom_info),
            "::",
            stringify!(address_bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_eeprom_info>())).delay_usec as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_eeprom_info),
            "::",
            stringify!(delay_usec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_eeprom_info>())).page_size as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_eeprom_info),
            "::",
            stringify!(page_size)
        )
    );
}
pub const e1000_align_type_e1000_byte_align: e1000_align_type = 0;
pub const e1000_align_type_e1000_word_align: e1000_align_type = 1;
pub const e1000_align_type_e1000_dword_align: e1000_align_type = 2;
pub type e1000_align_type = ::std::os::raw::c_uint;
extern "C" {
    pub fn e1000_reset_hw(hw: *mut e1000_hw) -> i32;
}
extern "C" {
    pub fn e1000_init_hw(hw: *mut e1000_hw) -> i32;
}
extern "C" {
    pub fn e1000_set_mac_type(hw: *mut e1000_hw) -> i32;
}
extern "C" {
    pub fn e1000_set_media_type(hw: *mut e1000_hw);
}
extern "C" {
    pub fn e1000_setup_link(hw: *mut e1000_hw) -> i32;
}
extern "C" {
    pub fn e1000_phy_setup_autoneg(hw: *mut e1000_hw) -> i32;
}
extern "C" {
    pub fn e1000_config_collision_dist(hw: *mut e1000_hw);
}
extern "C" {
    pub fn e1000_check_for_link(hw: *mut e1000_hw) -> i32;
}
extern "C" {
    pub fn e1000_get_speed_and_duplex(hw: *mut e1000_hw, speed: *mut u16, duplex: *mut u16) -> i32;
}
extern "C" {
    pub fn e1000_force_mac_fc(hw: *mut e1000_hw) -> i32;
}
extern "C" {
    pub fn e1000_read_phy_reg(hw: *mut e1000_hw, reg_addr: u32, phy_data: *mut u16) -> i32;
}
extern "C" {
    pub fn e1000_write_phy_reg(hw: *mut e1000_hw, reg_addr: u32, data: u16) -> i32;
}
extern "C" {
    pub fn e1000_phy_hw_reset(hw: *mut e1000_hw) -> i32;
}
extern "C" {
    pub fn e1000_phy_reset(hw: *mut e1000_hw) -> i32;
}
extern "C" {
    pub fn e1000_phy_get_info(hw: *mut e1000_hw, phy_info: *mut e1000_phy_info) -> i32;
}
extern "C" {
    pub fn e1000_validate_mdi_setting(hw: *mut e1000_hw) -> i32;
}
extern "C" {
    pub fn e1000_init_eeprom_params(hw: *mut e1000_hw) -> i32;
}
extern "C" {
    pub fn e1000_enable_mng_pass_thru(hw: *mut e1000_hw) -> u32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct e1000_host_mng_command_header {
    pub command_id: u8,
    pub checksum: u8,
    pub reserved1: u16,
    pub reserved2: u16,
    pub command_length: u16,
}
#[test]
fn bindgen_test_layout_e1000_host_mng_command_header() {
    assert_eq!(
        ::std::mem::size_of::<e1000_host_mng_command_header>(),
        8usize,
        concat!("Size of: ", stringify!(e1000_host_mng_command_header))
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_host_mng_command_header>(),
        2usize,
        concat!("Alignment of ", stringify!(e1000_host_mng_command_header))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_host_mng_command_header>())).command_id as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_host_mng_command_header),
            "::",
            stringify!(command_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_host_mng_command_header>())).checksum as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_host_mng_command_header),
            "::",
            stringify!(checksum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_host_mng_command_header>())).reserved1 as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_host_mng_command_header),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_host_mng_command_header>())).reserved2 as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_host_mng_command_header),
            "::",
            stringify!(reserved2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_host_mng_command_header>())).command_length as *const _
                as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_host_mng_command_header),
            "::",
            stringify!(command_length)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct e1000_host_mng_command_info {
    pub command_header: e1000_host_mng_command_header,
    pub command_data: [u8; 1784usize],
}
#[test]
fn bindgen_test_layout_e1000_host_mng_command_info() {
    assert_eq!(
        ::std::mem::size_of::<e1000_host_mng_command_info>(),
        1792usize,
        concat!("Size of: ", stringify!(e1000_host_mng_command_info))
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_host_mng_command_info>(),
        2usize,
        concat!("Alignment of ", stringify!(e1000_host_mng_command_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_host_mng_command_info>())).command_header as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_host_mng_command_info),
            "::",
            stringify!(command_header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_host_mng_command_info>())).command_data as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_host_mng_command_info),
            "::",
            stringify!(command_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct e1000_host_mng_dhcp_cookie {
    pub signature: u32,
    pub status: u8,
    pub reserved0: u8,
    pub vlan_id: u16,
    pub reserved1: u32,
    pub reserved2: u16,
    pub reserved3: u8,
    pub checksum: u8,
}
#[test]
fn bindgen_test_layout_e1000_host_mng_dhcp_cookie() {
    assert_eq!(
        ::std::mem::size_of::<e1000_host_mng_dhcp_cookie>(),
        16usize,
        concat!("Size of: ", stringify!(e1000_host_mng_dhcp_cookie))
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_host_mng_dhcp_cookie>(),
        4usize,
        concat!("Alignment of ", stringify!(e1000_host_mng_dhcp_cookie))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_host_mng_dhcp_cookie>())).signature as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_host_mng_dhcp_cookie),
            "::",
            stringify!(signature)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_host_mng_dhcp_cookie>())).status as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_host_mng_dhcp_cookie),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_host_mng_dhcp_cookie>())).reserved0 as *const _ as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_host_mng_dhcp_cookie),
            "::",
            stringify!(reserved0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_host_mng_dhcp_cookie>())).vlan_id as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_host_mng_dhcp_cookie),
            "::",
            stringify!(vlan_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_host_mng_dhcp_cookie>())).reserved1 as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_host_mng_dhcp_cookie),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_host_mng_dhcp_cookie>())).reserved2 as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_host_mng_dhcp_cookie),
            "::",
            stringify!(reserved2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_host_mng_dhcp_cookie>())).reserved3 as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_host_mng_dhcp_cookie),
            "::",
            stringify!(reserved3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_host_mng_dhcp_cookie>())).checksum as *const _ as usize
        },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_host_mng_dhcp_cookie),
            "::",
            stringify!(checksum)
        )
    );
}
extern "C" {
    pub fn e1000_check_mng_mode(hw: *mut e1000_hw) -> bool;
}
extern "C" {
    pub fn e1000_read_eeprom(hw: *mut e1000_hw, reg: u16, words: u16, data: *mut u16) -> i32;
}
extern "C" {
    pub fn e1000_validate_eeprom_checksum(hw: *mut e1000_hw) -> i32;
}
extern "C" {
    pub fn e1000_update_eeprom_checksum(hw: *mut e1000_hw) -> i32;
}
extern "C" {
    pub fn e1000_write_eeprom(hw: *mut e1000_hw, reg: u16, words: u16, data: *mut u16) -> i32;
}
extern "C" {
    pub fn e1000_read_mac_addr(hw: *mut e1000_hw) -> i32;
}
extern "C" {
    pub fn e1000_hash_mc_addr(hw: *mut e1000_hw, mc_addr: *mut u8) -> u32;
}
extern "C" {
    pub fn e1000_mta_set(hw: *mut e1000_hw, hash_value: u32);
}
extern "C" {
    pub fn e1000_rar_set(hw: *mut e1000_hw, mc_addr: *mut u8, rar_index: u32);
}
extern "C" {
    pub fn e1000_write_vfta(hw: *mut e1000_hw, offset: u32, value: u32);
}
extern "C" {
    pub fn e1000_setup_led(hw: *mut e1000_hw) -> i32;
}
extern "C" {
    pub fn e1000_cleanup_led(hw: *mut e1000_hw) -> i32;
}
extern "C" {
    pub fn e1000_led_on(hw: *mut e1000_hw) -> i32;
}
extern "C" {
    pub fn e1000_led_off(hw: *mut e1000_hw) -> i32;
}
extern "C" {
    pub fn e1000_blink_led_start(hw: *mut e1000_hw) -> i32;
}
extern "C" {
    pub fn e1000_reset_adaptive(hw: *mut e1000_hw);
}
extern "C" {
    pub fn e1000_update_adaptive(hw: *mut e1000_hw);
}
extern "C" {
    pub fn e1000_tbi_adjust_stats(
        hw: *mut e1000_hw,
        stats: *mut e1000_hw_stats,
        frame_len: u32,
        mac_addr: *mut u8,
    );
}
extern "C" {
    pub fn e1000_get_bus_info(hw: *mut e1000_hw);
}
extern "C" {
    pub fn e1000_pci_set_mwi(hw: *mut e1000_hw);
}
extern "C" {
    pub fn e1000_pci_clear_mwi(hw: *mut e1000_hw);
}
extern "C" {
    pub fn e1000_pcix_set_mmrbc(hw: *mut e1000_hw, mmrbc: ::std::os::raw::c_int);
}
extern "C" {
    pub fn e1000_pcix_get_mmrbc(hw: *mut e1000_hw) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn e1000_io_write(hw: *mut e1000_hw, port: ::std::os::raw::c_ulong, value: u32);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct e1000_rx_desc {
    pub buffer_addr: __le64,
    pub length: __le16,
    pub csum: __le16,
    pub status: u8,
    pub errors: u8,
    pub special: __le16,
}
#[test]
fn bindgen_test_layout_e1000_rx_desc() {
    assert_eq!(
        ::std::mem::size_of::<e1000_rx_desc>(),
        16usize,
        concat!("Size of: ", stringify!(e1000_rx_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_rx_desc>(),
        8usize,
        concat!("Alignment of ", stringify!(e1000_rx_desc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_rx_desc>())).buffer_addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_rx_desc),
            "::",
            stringify!(buffer_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_rx_desc>())).length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_rx_desc),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_rx_desc>())).csum as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_rx_desc),
            "::",
            stringify!(csum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_rx_desc>())).status as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_rx_desc),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_rx_desc>())).errors as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_rx_desc),
            "::",
            stringify!(errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_rx_desc>())).special as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_rx_desc),
            "::",
            stringify!(special)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union e1000_rx_desc_extended {
    pub read: e1000_rx_desc_extended__bindgen_ty_1,
    pub wb: e1000_rx_desc_extended__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct e1000_rx_desc_extended__bindgen_ty_1 {
    pub buffer_addr: __le64,
    pub reserved: __le64,
}
#[test]
fn bindgen_test_layout_e1000_rx_desc_extended__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<e1000_rx_desc_extended__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(e1000_rx_desc_extended__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_rx_desc_extended__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(e1000_rx_desc_extended__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_rx_desc_extended__bindgen_ty_1>())).buffer_addr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_rx_desc_extended__bindgen_ty_1),
            "::",
            stringify!(buffer_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_rx_desc_extended__bindgen_ty_1>())).reserved as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_rx_desc_extended__bindgen_ty_1),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct e1000_rx_desc_extended__bindgen_ty_2 {
    pub lower: e1000_rx_desc_extended__bindgen_ty_2__bindgen_ty_1,
    pub upper: e1000_rx_desc_extended__bindgen_ty_2__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct e1000_rx_desc_extended__bindgen_ty_2__bindgen_ty_1 {
    pub mrq: __le32,
    pub hi_dword: e1000_rx_desc_extended__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union e1000_rx_desc_extended__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1 {
    pub rss: __le32,
    pub csum_ip: e1000_rx_desc_extended__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct e1000_rx_desc_extended__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub ip_id: __le16,
    pub csum: __le16,
}
#[test]
fn bindgen_test_layout_e1000_rx_desc_extended__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1(
) {
    assert_eq!(
        ::std::mem::size_of::<
            e1000_rx_desc_extended__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        >(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(
                e1000_rx_desc_extended__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1
            )
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            e1000_rx_desc_extended__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        >(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(
                e1000_rx_desc_extended__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1
            )
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<
                e1000_rx_desc_extended__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
            >()))
            .ip_id as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(
                e1000_rx_desc_extended__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1
            ),
            "::",
            stringify!(ip_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<
                e1000_rx_desc_extended__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
            >()))
            .csum as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(
                e1000_rx_desc_extended__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1
            ),
            "::",
            stringify!(csum)
        )
    );
}
#[test]
fn bindgen_test_layout_e1000_rx_desc_extended__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<e1000_rx_desc_extended__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(e1000_rx_desc_extended__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_rx_desc_extended__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(e1000_rx_desc_extended__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            & (* (:: std :: ptr :: null :: < e1000_rx_desc_extended__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1 > ())) . rss as * const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_rx_desc_extended__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(rss)
        )
    );
    assert_eq!(
        unsafe {
            & (* (:: std :: ptr :: null :: < e1000_rx_desc_extended__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1 > ())) . csum_ip as * const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_rx_desc_extended__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(csum_ip)
        )
    );
}
#[test]
fn bindgen_test_layout_e1000_rx_desc_extended__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<e1000_rx_desc_extended__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(e1000_rx_desc_extended__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_rx_desc_extended__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(e1000_rx_desc_extended__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_rx_desc_extended__bindgen_ty_2__bindgen_ty_1>())).mrq
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_rx_desc_extended__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(mrq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_rx_desc_extended__bindgen_ty_2__bindgen_ty_1>())).hi_dword
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_rx_desc_extended__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(hi_dword)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct e1000_rx_desc_extended__bindgen_ty_2__bindgen_ty_2 {
    pub status_error: __le32,
    pub length: __le16,
    pub vlan: __le16,
}
#[test]
fn bindgen_test_layout_e1000_rx_desc_extended__bindgen_ty_2__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<e1000_rx_desc_extended__bindgen_ty_2__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(e1000_rx_desc_extended__bindgen_ty_2__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_rx_desc_extended__bindgen_ty_2__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(e1000_rx_desc_extended__bindgen_ty_2__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_rx_desc_extended__bindgen_ty_2__bindgen_ty_2>()))
                .status_error as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_rx_desc_extended__bindgen_ty_2__bindgen_ty_2),
            "::",
            stringify!(status_error)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_rx_desc_extended__bindgen_ty_2__bindgen_ty_2>())).length
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_rx_desc_extended__bindgen_ty_2__bindgen_ty_2),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_rx_desc_extended__bindgen_ty_2__bindgen_ty_2>())).vlan
                as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_rx_desc_extended__bindgen_ty_2__bindgen_ty_2),
            "::",
            stringify!(vlan)
        )
    );
}
#[test]
fn bindgen_test_layout_e1000_rx_desc_extended__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<e1000_rx_desc_extended__bindgen_ty_2>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(e1000_rx_desc_extended__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_rx_desc_extended__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(e1000_rx_desc_extended__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_rx_desc_extended__bindgen_ty_2>())).lower as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_rx_desc_extended__bindgen_ty_2),
            "::",
            stringify!(lower)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_rx_desc_extended__bindgen_ty_2>())).upper as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_rx_desc_extended__bindgen_ty_2),
            "::",
            stringify!(upper)
        )
    );
}
#[test]
fn bindgen_test_layout_e1000_rx_desc_extended() {
    assert_eq!(
        ::std::mem::size_of::<e1000_rx_desc_extended>(),
        16usize,
        concat!("Size of: ", stringify!(e1000_rx_desc_extended))
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_rx_desc_extended>(),
        8usize,
        concat!("Alignment of ", stringify!(e1000_rx_desc_extended))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_rx_desc_extended>())).read as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_rx_desc_extended),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_rx_desc_extended>())).wb as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_rx_desc_extended),
            "::",
            stringify!(wb)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union e1000_rx_desc_packet_split {
    pub read: e1000_rx_desc_packet_split__bindgen_ty_1,
    pub wb: e1000_rx_desc_packet_split__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct e1000_rx_desc_packet_split__bindgen_ty_1 {
    pub buffer_addr: [__le64; 4usize],
}
#[test]
fn bindgen_test_layout_e1000_rx_desc_packet_split__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<e1000_rx_desc_packet_split__bindgen_ty_1>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(e1000_rx_desc_packet_split__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_rx_desc_packet_split__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(e1000_rx_desc_packet_split__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_rx_desc_packet_split__bindgen_ty_1>())).buffer_addr
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_rx_desc_packet_split__bindgen_ty_1),
            "::",
            stringify!(buffer_addr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct e1000_rx_desc_packet_split__bindgen_ty_2 {
    pub lower: e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_1,
    pub middle: e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_2,
    pub upper: e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_3,
    pub reserved: __le64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_1 {
    pub mrq: __le32,
    pub hi_dword: e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1 {
    pub rss: __le32,
    pub csum_ip: e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub ip_id: __le16,
    pub csum: __le16,
}
#[test]
fn bindgen_test_layout_e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1(
) {
    assert_eq!(
        ::std::mem::size_of::<
            e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        >(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(
                e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1
            )
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        >(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(
                e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1
            )
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<
                e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
            >()))
            .ip_id as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(
                e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1
            ),
            "::",
            stringify!(ip_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<
                e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
            >()))
            .csum as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(
                e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1
            ),
            "::",
            stringify!(csum)
        )
    );
}
#[test]
fn bindgen_test_layout_e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1>(
        ),
        4usize,
        concat!(
            "Size of: ",
            stringify!(e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1>(
        ),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<
                e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1,
            >()))
            .rss as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(rss)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<
                e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1,
            >()))
            .csum_ip as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(csum_ip)
        )
    );
}
#[test]
fn bindgen_test_layout_e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_1>())).mrq
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(mrq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_1>()))
                .hi_dword as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(hi_dword)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_2 {
    pub status_error: __le32,
    pub length0: __le16,
    pub vlan: __le16,
}
#[test]
fn bindgen_test_layout_e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_2>()))
                .status_error as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_2),
            "::",
            stringify!(status_error)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_2>()))
                .length0 as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_2),
            "::",
            stringify!(length0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_2>())).vlan
                as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_2),
            "::",
            stringify!(vlan)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_3 {
    pub header_status: __le16,
    pub length: [__le16; 3usize],
}
#[test]
fn bindgen_test_layout_e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_3>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_3>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_3>()))
                .header_status as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_3),
            "::",
            stringify!(header_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_3>()))
                .length as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_rx_desc_packet_split__bindgen_ty_2__bindgen_ty_3),
            "::",
            stringify!(length)
        )
    );
}
#[test]
fn bindgen_test_layout_e1000_rx_desc_packet_split__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<e1000_rx_desc_packet_split__bindgen_ty_2>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(e1000_rx_desc_packet_split__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_rx_desc_packet_split__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(e1000_rx_desc_packet_split__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_rx_desc_packet_split__bindgen_ty_2>())).lower as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_rx_desc_packet_split__bindgen_ty_2),
            "::",
            stringify!(lower)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_rx_desc_packet_split__bindgen_ty_2>())).middle as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_rx_desc_packet_split__bindgen_ty_2),
            "::",
            stringify!(middle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_rx_desc_packet_split__bindgen_ty_2>())).upper as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_rx_desc_packet_split__bindgen_ty_2),
            "::",
            stringify!(upper)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_rx_desc_packet_split__bindgen_ty_2>())).reserved
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_rx_desc_packet_split__bindgen_ty_2),
            "::",
            stringify!(reserved)
        )
    );
}
#[test]
fn bindgen_test_layout_e1000_rx_desc_packet_split() {
    assert_eq!(
        ::std::mem::size_of::<e1000_rx_desc_packet_split>(),
        32usize,
        concat!("Size of: ", stringify!(e1000_rx_desc_packet_split))
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_rx_desc_packet_split>(),
        8usize,
        concat!("Alignment of ", stringify!(e1000_rx_desc_packet_split))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_rx_desc_packet_split>())).read as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_rx_desc_packet_split),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_rx_desc_packet_split>())).wb as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_rx_desc_packet_split),
            "::",
            stringify!(wb)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct e1000_tx_desc {
    pub buffer_addr: __le64,
    pub lower: e1000_tx_desc__bindgen_ty_1,
    pub upper: e1000_tx_desc__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union e1000_tx_desc__bindgen_ty_1 {
    pub data: __le32,
    pub flags: e1000_tx_desc__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct e1000_tx_desc__bindgen_ty_1__bindgen_ty_1 {
    pub length: __le16,
    pub cso: u8,
    pub cmd: u8,
}
#[test]
fn bindgen_test_layout_e1000_tx_desc__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<e1000_tx_desc__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(e1000_tx_desc__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_tx_desc__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(e1000_tx_desc__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_tx_desc__bindgen_ty_1__bindgen_ty_1>())).length as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_tx_desc__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_tx_desc__bindgen_ty_1__bindgen_ty_1>())).cso as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_tx_desc__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(cso)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_tx_desc__bindgen_ty_1__bindgen_ty_1>())).cmd as *const _
                as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_tx_desc__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(cmd)
        )
    );
}
#[test]
fn bindgen_test_layout_e1000_tx_desc__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<e1000_tx_desc__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(e1000_tx_desc__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_tx_desc__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(e1000_tx_desc__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_tx_desc__bindgen_ty_1>())).data as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_tx_desc__bindgen_ty_1),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_tx_desc__bindgen_ty_1>())).flags as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_tx_desc__bindgen_ty_1),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union e1000_tx_desc__bindgen_ty_2 {
    pub data: __le32,
    pub fields: e1000_tx_desc__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct e1000_tx_desc__bindgen_ty_2__bindgen_ty_1 {
    pub status: u8,
    pub css: u8,
    pub special: __le16,
}
#[test]
fn bindgen_test_layout_e1000_tx_desc__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<e1000_tx_desc__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(e1000_tx_desc__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_tx_desc__bindgen_ty_2__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(e1000_tx_desc__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_tx_desc__bindgen_ty_2__bindgen_ty_1>())).status as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_tx_desc__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_tx_desc__bindgen_ty_2__bindgen_ty_1>())).css as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_tx_desc__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(css)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_tx_desc__bindgen_ty_2__bindgen_ty_1>())).special
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_tx_desc__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(special)
        )
    );
}
#[test]
fn bindgen_test_layout_e1000_tx_desc__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<e1000_tx_desc__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(e1000_tx_desc__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_tx_desc__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(e1000_tx_desc__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_tx_desc__bindgen_ty_2>())).data as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_tx_desc__bindgen_ty_2),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_tx_desc__bindgen_ty_2>())).fields as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_tx_desc__bindgen_ty_2),
            "::",
            stringify!(fields)
        )
    );
}
#[test]
fn bindgen_test_layout_e1000_tx_desc() {
    assert_eq!(
        ::std::mem::size_of::<e1000_tx_desc>(),
        16usize,
        concat!("Size of: ", stringify!(e1000_tx_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_tx_desc>(),
        8usize,
        concat!("Alignment of ", stringify!(e1000_tx_desc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_tx_desc>())).buffer_addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_tx_desc),
            "::",
            stringify!(buffer_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_tx_desc>())).lower as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_tx_desc),
            "::",
            stringify!(lower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_tx_desc>())).upper as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_tx_desc),
            "::",
            stringify!(upper)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct e1000_context_desc {
    pub lower_setup: e1000_context_desc__bindgen_ty_1,
    pub upper_setup: e1000_context_desc__bindgen_ty_2,
    pub cmd_and_length: __le32,
    pub tcp_seg_setup: e1000_context_desc__bindgen_ty_3,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union e1000_context_desc__bindgen_ty_1 {
    pub ip_config: __le32,
    pub ip_fields: e1000_context_desc__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct e1000_context_desc__bindgen_ty_1__bindgen_ty_1 {
    pub ipcss: u8,
    pub ipcso: u8,
    pub ipcse: __le16,
}
#[test]
fn bindgen_test_layout_e1000_context_desc__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<e1000_context_desc__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(e1000_context_desc__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_context_desc__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(e1000_context_desc__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_context_desc__bindgen_ty_1__bindgen_ty_1>())).ipcss
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_context_desc__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(ipcss)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_context_desc__bindgen_ty_1__bindgen_ty_1>())).ipcso
                as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_context_desc__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(ipcso)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_context_desc__bindgen_ty_1__bindgen_ty_1>())).ipcse
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_context_desc__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(ipcse)
        )
    );
}
#[test]
fn bindgen_test_layout_e1000_context_desc__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<e1000_context_desc__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(e1000_context_desc__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_context_desc__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(e1000_context_desc__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_context_desc__bindgen_ty_1>())).ip_config as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_context_desc__bindgen_ty_1),
            "::",
            stringify!(ip_config)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_context_desc__bindgen_ty_1>())).ip_fields as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_context_desc__bindgen_ty_1),
            "::",
            stringify!(ip_fields)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union e1000_context_desc__bindgen_ty_2 {
    pub tcp_config: __le32,
    pub tcp_fields: e1000_context_desc__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct e1000_context_desc__bindgen_ty_2__bindgen_ty_1 {
    pub tucss: u8,
    pub tucso: u8,
    pub tucse: __le16,
}
#[test]
fn bindgen_test_layout_e1000_context_desc__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<e1000_context_desc__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(e1000_context_desc__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_context_desc__bindgen_ty_2__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(e1000_context_desc__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_context_desc__bindgen_ty_2__bindgen_ty_1>())).tucss
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_context_desc__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(tucss)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_context_desc__bindgen_ty_2__bindgen_ty_1>())).tucso
                as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_context_desc__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(tucso)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_context_desc__bindgen_ty_2__bindgen_ty_1>())).tucse
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_context_desc__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(tucse)
        )
    );
}
#[test]
fn bindgen_test_layout_e1000_context_desc__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<e1000_context_desc__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(e1000_context_desc__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_context_desc__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(e1000_context_desc__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_context_desc__bindgen_ty_2>())).tcp_config as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_context_desc__bindgen_ty_2),
            "::",
            stringify!(tcp_config)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_context_desc__bindgen_ty_2>())).tcp_fields as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_context_desc__bindgen_ty_2),
            "::",
            stringify!(tcp_fields)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union e1000_context_desc__bindgen_ty_3 {
    pub data: __le32,
    pub fields: e1000_context_desc__bindgen_ty_3__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct e1000_context_desc__bindgen_ty_3__bindgen_ty_1 {
    pub status: u8,
    pub hdr_len: u8,
    pub mss: __le16,
}
#[test]
fn bindgen_test_layout_e1000_context_desc__bindgen_ty_3__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<e1000_context_desc__bindgen_ty_3__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(e1000_context_desc__bindgen_ty_3__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_context_desc__bindgen_ty_3__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(e1000_context_desc__bindgen_ty_3__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_context_desc__bindgen_ty_3__bindgen_ty_1>())).status
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_context_desc__bindgen_ty_3__bindgen_ty_1),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_context_desc__bindgen_ty_3__bindgen_ty_1>())).hdr_len
                as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_context_desc__bindgen_ty_3__bindgen_ty_1),
            "::",
            stringify!(hdr_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_context_desc__bindgen_ty_3__bindgen_ty_1>())).mss
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_context_desc__bindgen_ty_3__bindgen_ty_1),
            "::",
            stringify!(mss)
        )
    );
}
#[test]
fn bindgen_test_layout_e1000_context_desc__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<e1000_context_desc__bindgen_ty_3>(),
        4usize,
        concat!("Size of: ", stringify!(e1000_context_desc__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_context_desc__bindgen_ty_3>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(e1000_context_desc__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_context_desc__bindgen_ty_3>())).data as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_context_desc__bindgen_ty_3),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_context_desc__bindgen_ty_3>())).fields as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_context_desc__bindgen_ty_3),
            "::",
            stringify!(fields)
        )
    );
}
#[test]
fn bindgen_test_layout_e1000_context_desc() {
    assert_eq!(
        ::std::mem::size_of::<e1000_context_desc>(),
        16usize,
        concat!("Size of: ", stringify!(e1000_context_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_context_desc>(),
        4usize,
        concat!("Alignment of ", stringify!(e1000_context_desc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_context_desc>())).lower_setup as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_context_desc),
            "::",
            stringify!(lower_setup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_context_desc>())).upper_setup as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_context_desc),
            "::",
            stringify!(upper_setup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_context_desc>())).cmd_and_length as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_context_desc),
            "::",
            stringify!(cmd_and_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_context_desc>())).tcp_seg_setup as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_context_desc),
            "::",
            stringify!(tcp_seg_setup)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct e1000_data_desc {
    pub buffer_addr: __le64,
    pub lower: e1000_data_desc__bindgen_ty_1,
    pub upper: e1000_data_desc__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union e1000_data_desc__bindgen_ty_1 {
    pub data: __le32,
    pub flags: e1000_data_desc__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct e1000_data_desc__bindgen_ty_1__bindgen_ty_1 {
    pub length: __le16,
    pub typ_len_ext: u8,
    pub cmd: u8,
}
#[test]
fn bindgen_test_layout_e1000_data_desc__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<e1000_data_desc__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(e1000_data_desc__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_data_desc__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(e1000_data_desc__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_data_desc__bindgen_ty_1__bindgen_ty_1>())).length
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_data_desc__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_data_desc__bindgen_ty_1__bindgen_ty_1>())).typ_len_ext
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_data_desc__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(typ_len_ext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_data_desc__bindgen_ty_1__bindgen_ty_1>())).cmd as *const _
                as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_data_desc__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(cmd)
        )
    );
}
#[test]
fn bindgen_test_layout_e1000_data_desc__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<e1000_data_desc__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(e1000_data_desc__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_data_desc__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(e1000_data_desc__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_data_desc__bindgen_ty_1>())).data as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_data_desc__bindgen_ty_1),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_data_desc__bindgen_ty_1>())).flags as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_data_desc__bindgen_ty_1),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union e1000_data_desc__bindgen_ty_2 {
    pub data: __le32,
    pub fields: e1000_data_desc__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct e1000_data_desc__bindgen_ty_2__bindgen_ty_1 {
    pub status: u8,
    pub popts: u8,
    pub special: __le16,
}
#[test]
fn bindgen_test_layout_e1000_data_desc__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<e1000_data_desc__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(e1000_data_desc__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_data_desc__bindgen_ty_2__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(e1000_data_desc__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_data_desc__bindgen_ty_2__bindgen_ty_1>())).status
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_data_desc__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_data_desc__bindgen_ty_2__bindgen_ty_1>())).popts
                as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_data_desc__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(popts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_data_desc__bindgen_ty_2__bindgen_ty_1>())).special
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_data_desc__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(special)
        )
    );
}
#[test]
fn bindgen_test_layout_e1000_data_desc__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<e1000_data_desc__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(e1000_data_desc__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_data_desc__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(e1000_data_desc__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_data_desc__bindgen_ty_2>())).data as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_data_desc__bindgen_ty_2),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_data_desc__bindgen_ty_2>())).fields as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_data_desc__bindgen_ty_2),
            "::",
            stringify!(fields)
        )
    );
}
#[test]
fn bindgen_test_layout_e1000_data_desc() {
    assert_eq!(
        ::std::mem::size_of::<e1000_data_desc>(),
        16usize,
        concat!("Size of: ", stringify!(e1000_data_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_data_desc>(),
        8usize,
        concat!("Alignment of ", stringify!(e1000_data_desc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_data_desc>())).buffer_addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_data_desc),
            "::",
            stringify!(buffer_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_data_desc>())).lower as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_data_desc),
            "::",
            stringify!(lower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_data_desc>())).upper as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_data_desc),
            "::",
            stringify!(upper)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct e1000_rar {
    pub low: __le32,
    pub high: __le32,
}
#[test]
fn bindgen_test_layout_e1000_rar() {
    assert_eq!(
        ::std::mem::size_of::<e1000_rar>(),
        8usize,
        concat!("Size of: ", stringify!(e1000_rar))
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_rar>(),
        4usize,
        concat!("Alignment of ", stringify!(e1000_rar))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_rar>())).low as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_rar),
            "::",
            stringify!(low)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_rar>())).high as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_rar),
            "::",
            stringify!(high)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct e1000_ipv4_at_entry {
    pub ipv4_addr: u32,
    pub reserved: u32,
}
#[test]
fn bindgen_test_layout_e1000_ipv4_at_entry() {
    assert_eq!(
        ::std::mem::size_of::<e1000_ipv4_at_entry>(),
        8usize,
        concat!("Size of: ", stringify!(e1000_ipv4_at_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_ipv4_at_entry>(),
        4usize,
        concat!("Alignment of ", stringify!(e1000_ipv4_at_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_ipv4_at_entry>())).ipv4_addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_ipv4_at_entry),
            "::",
            stringify!(ipv4_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_ipv4_at_entry>())).reserved as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_ipv4_at_entry),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct e1000_ipv6_at_entry {
    pub ipv6_addr: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_e1000_ipv6_at_entry() {
    assert_eq!(
        ::std::mem::size_of::<e1000_ipv6_at_entry>(),
        16usize,
        concat!("Size of: ", stringify!(e1000_ipv6_at_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_ipv6_at_entry>(),
        1usize,
        concat!("Alignment of ", stringify!(e1000_ipv6_at_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_ipv6_at_entry>())).ipv6_addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_ipv6_at_entry),
            "::",
            stringify!(ipv6_addr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct e1000_fflt_entry {
    pub length: u32,
    pub reserved: u32,
}
#[test]
fn bindgen_test_layout_e1000_fflt_entry() {
    assert_eq!(
        ::std::mem::size_of::<e1000_fflt_entry>(),
        8usize,
        concat!("Size of: ", stringify!(e1000_fflt_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_fflt_entry>(),
        4usize,
        concat!("Alignment of ", stringify!(e1000_fflt_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_fflt_entry>())).length as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_fflt_entry),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_fflt_entry>())).reserved as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_fflt_entry),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct e1000_ffmt_entry {
    pub mask: u32,
    pub reserved: u32,
}
#[test]
fn bindgen_test_layout_e1000_ffmt_entry() {
    assert_eq!(
        ::std::mem::size_of::<e1000_ffmt_entry>(),
        8usize,
        concat!("Size of: ", stringify!(e1000_ffmt_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_ffmt_entry>(),
        4usize,
        concat!("Alignment of ", stringify!(e1000_ffmt_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_ffmt_entry>())).mask as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_ffmt_entry),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_ffmt_entry>())).reserved as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_ffmt_entry),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct e1000_ffvt_entry {
    pub value: u32,
    pub reserved: u32,
}
#[test]
fn bindgen_test_layout_e1000_ffvt_entry() {
    assert_eq!(
        ::std::mem::size_of::<e1000_ffvt_entry>(),
        8usize,
        concat!("Size of: ", stringify!(e1000_ffvt_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_ffvt_entry>(),
        4usize,
        concat!("Alignment of ", stringify!(e1000_ffvt_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_ffvt_entry>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_ffvt_entry),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_ffvt_entry>())).reserved as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_ffvt_entry),
            "::",
            stringify!(reserved)
        )
    );
}

#[test]
fn bindgen_test_layout_e1000_hw_stats() {
    assert_eq!(
        ::std::mem::size_of::<e1000_hw_stats>(),
        552usize,
        concat!("Size of: ", stringify!(e1000_hw_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_hw_stats>(),
        8usize,
        concat!("Alignment of ", stringify!(e1000_hw_stats))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).crcerrs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(crcerrs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).algnerrc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(algnerrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).symerrs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(symerrs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).rxerrc as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(rxerrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).txerrc as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(txerrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).mpc as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(mpc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).scc as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(scc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).ecol as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(ecol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).mcc as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(mcc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).latecol as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(latecol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).colc as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(colc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).dc as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(dc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).tncrs as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(tncrs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).sec as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).cexterr as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(cexterr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).rlec as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(rlec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).xonrxc as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(xonrxc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).xontxc as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(xontxc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).xoffrxc as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(xoffrxc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).xofftxc as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(xofftxc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).fcruc as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(fcruc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).prc64 as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(prc64)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).prc127 as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(prc127)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).prc255 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(prc255)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).prc511 as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(prc511)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).prc1023 as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(prc1023)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).prc1522 as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(prc1522)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).gprc as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(gprc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).bprc as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(bprc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).mprc as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(mprc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).gptc as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(gptc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).gorcl as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(gorcl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).gorch as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(gorch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).gotcl as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(gotcl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).gotch as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(gotch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).rnbc as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(rnbc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).ruc as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(ruc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).rfc as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(rfc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).roc as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(roc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).rlerrc as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(rlerrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).rjc as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(rjc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).mgprc as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(mgprc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).mgpdc as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(mgpdc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).mgptc as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(mgptc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).torl as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(torl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).torh as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(torh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).totl as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(totl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).toth as *const _ as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(toth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).tpr as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(tpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).tpt as *const _ as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(tpt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).ptc64 as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(ptc64)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).ptc127 as *const _ as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(ptc127)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).ptc255 as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(ptc255)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).ptc511 as *const _ as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(ptc511)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).ptc1023 as *const _ as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(ptc1023)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).ptc1522 as *const _ as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(ptc1522)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).mptc as *const _ as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(mptc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).bptc as *const _ as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(bptc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).tsctc as *const _ as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(tsctc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).tsctfc as *const _ as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(tsctfc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).iac as *const _ as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(iac)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).icrxptc as *const _ as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(icrxptc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).icrxatc as *const _ as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(icrxatc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).ictxptc as *const _ as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(ictxptc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).ictxatc as *const _ as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(ictxatc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).ictxqec as *const _ as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(ictxqec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).ictxqmtc as *const _ as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(ictxqmtc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).icrxdmtc as *const _ as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(icrxdmtc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw_stats>())).icrxoc as *const _ as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw_stats),
            "::",
            stringify!(icrxoc)
        )
    );
}

#[test]
fn bindgen_test_layout_e1000_hw() {
    assert_eq!(
        ::std::mem::size_of::<e1000_hw>(),
        288usize,
        concat!("Size of: ", stringify!(e1000_hw))
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_hw>(),
        8usize,
        concat!("Alignment of ", stringify!(e1000_hw))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).hw_addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(hw_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).flash_address as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(flash_address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_hw>())).ce4100_gbe_mdio_base_virt as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(ce4100_gbe_mdio_base_virt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).mac_type as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(mac_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).phy_type as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(phy_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).phy_init_script as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(phy_init_script)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).media_type as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(media_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).back as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(back)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).eeprom_shadow_ram as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(eeprom_shadow_ram)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).flash_bank_size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(flash_bank_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).flash_base_addr as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(flash_base_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).fc as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(fc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).bus_speed as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(bus_speed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).bus_width as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(bus_width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).bus_type as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(bus_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).eeprom as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(eeprom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).master_slave as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(master_slave)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).original_master_slave as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(original_master_slave)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).ffe_config_state as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(ffe_config_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).asf_firmware_present as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(asf_firmware_present)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_hw>())).eeprom_semaphore_present as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(eeprom_semaphore_present)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).io_base as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(io_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).phy_id as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(phy_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).phy_revision as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(phy_revision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).phy_addr as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(phy_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).original_fc as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(original_fc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).txcw as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(txcw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).autoneg_failed as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(autoneg_failed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).max_frame_size as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(max_frame_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).min_frame_size as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(min_frame_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).mc_filter_type as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(mc_filter_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).num_mc_addrs as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(num_mc_addrs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).collision_delta as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(collision_delta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).tx_packet_delta as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(tx_packet_delta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).ledctl_default as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(ledctl_default)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).ledctl_mode1 as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(ledctl_mode1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).ledctl_mode2 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(ledctl_mode2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).tx_pkt_filtering as *const _ as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(tx_pkt_filtering)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).mng_cookie as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(mng_cookie)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).phy_spd_default as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(phy_spd_default)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).autoneg_advertised as *const _ as usize },
        210usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(autoneg_advertised)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).pci_cmd_word as *const _ as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(pci_cmd_word)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).fc_high_water as *const _ as usize },
        214usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(fc_high_water)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).fc_low_water as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(fc_low_water)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).fc_pause_time as *const _ as usize },
        218usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(fc_pause_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).current_ifs_val as *const _ as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(current_ifs_val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).ifs_min_val as *const _ as usize },
        222usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(ifs_min_val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).ifs_max_val as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(ifs_max_val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).ifs_step_size as *const _ as usize },
        226usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(ifs_step_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).ifs_ratio as *const _ as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(ifs_ratio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).device_id as *const _ as usize },
        230usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(device_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).vendor_id as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(vendor_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).subsystem_id as *const _ as usize },
        234usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(subsystem_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).subsystem_vendor_id as *const _ as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(subsystem_vendor_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).revision_id as *const _ as usize },
        238usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(revision_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).autoneg as *const _ as usize },
        239usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(autoneg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).mdix as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(mdix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).forced_speed_duplex as *const _ as usize },
        241usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(forced_speed_duplex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).wait_autoneg_complete as *const _ as usize },
        242usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(wait_autoneg_complete)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).dma_fairness as *const _ as usize },
        243usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(dma_fairness)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).mac_addr as *const _ as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(mac_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).perm_mac_addr as *const _ as usize },
        250usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(perm_mac_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_hw>())).disable_polarity_correction as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(disable_polarity_correction)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).speed_downgraded as *const _ as usize },
        257usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(speed_downgraded)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).smart_speed as *const _ as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(smart_speed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).dsp_config_state as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(dsp_config_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).get_link_status as *const _ as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(get_link_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).serdes_has_link as *const _ as usize },
        269usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(serdes_has_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).tbi_compatibility_en as *const _ as usize },
        270usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(tbi_compatibility_en)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).tbi_compatibility_on as *const _ as usize },
        271usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(tbi_compatibility_on)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).laa_is_present as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(laa_is_present)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).phy_reset_disable as *const _ as usize },
        273usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(phy_reset_disable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_hw>())).initialize_hw_bits_disable as *const _ as usize
        },
        274usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(initialize_hw_bits_disable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).fc_send_xon as *const _ as usize },
        275usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(fc_send_xon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).fc_strict_ieee as *const _ as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(fc_strict_ieee)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).report_tx_early as *const _ as usize },
        277usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(report_tx_early)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).adaptive_ifs as *const _ as usize },
        278usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(adaptive_ifs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).ifs_params_forced as *const _ as usize },
        279usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(ifs_params_forced)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).in_ifs_mode as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(in_ifs_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_hw>())).mng_reg_access_disabled as *const _ as usize
        },
        281usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(mng_reg_access_disabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).leave_av_bit_off as *const _ as usize },
        282usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(leave_av_bit_off)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).bad_tx_carr_stats_fd as *const _ as usize },
        283usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(bad_tx_carr_stats_fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_hw>())).has_smbus as *const _ as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_hw),
            "::",
            stringify!(has_smbus)
        )
    );
}
pub const e1000_mng_mode_e1000_mng_mode_none: e1000_mng_mode = 0;
pub const e1000_mng_mode_e1000_mng_mode_asf: e1000_mng_mode = 1;
pub const e1000_mng_mode_e1000_mng_mode_pt: e1000_mng_mode = 2;
pub const e1000_mng_mode_e1000_mng_mode_ipmi: e1000_mng_mode = 3;
pub const e1000_mng_mode_e1000_mng_mode_host_interface_only: e1000_mng_mode = 4;
pub type e1000_mng_mode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct e1000_host_command_header {
    pub command_id: u8,
    pub command_length: u8,
    pub command_options: u8,
    pub checksum: u8,
}
#[test]
fn bindgen_test_layout_e1000_host_command_header() {
    assert_eq!(
        ::std::mem::size_of::<e1000_host_command_header>(),
        4usize,
        concat!("Size of: ", stringify!(e1000_host_command_header))
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_host_command_header>(),
        1usize,
        concat!("Alignment of ", stringify!(e1000_host_command_header))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_host_command_header>())).command_id as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_host_command_header),
            "::",
            stringify!(command_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_host_command_header>())).command_length as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_host_command_header),
            "::",
            stringify!(command_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_host_command_header>())).command_options as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_host_command_header),
            "::",
            stringify!(command_options)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_host_command_header>())).checksum as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_host_command_header),
            "::",
            stringify!(checksum)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct e1000_host_command_info {
    pub command_header: e1000_host_command_header,
    pub command_data: [u8; 252usize],
}
#[test]
fn bindgen_test_layout_e1000_host_command_info() {
    assert_eq!(
        ::std::mem::size_of::<e1000_host_command_info>(),
        256usize,
        concat!("Size of: ", stringify!(e1000_host_command_info))
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_host_command_info>(),
        1usize,
        concat!("Alignment of ", stringify!(e1000_host_command_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_host_command_info>())).command_header as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_host_command_info),
            "::",
            stringify!(command_header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_host_command_info>())).command_data as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_host_command_info),
            "::",
            stringify!(command_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct e1000_buffer {
    pub skb: *mut sk_buff,
    pub dma: dma_addr_t,
    pub page: *mut page,
    pub time_stamp: ::std::os::raw::c_ulong,
    pub length: u16,
    pub next_to_watch: u16,
    pub segs: ::std::os::raw::c_uint,
    pub bytecount: ::std::os::raw::c_uint,
    pub mapped_as_page: u16,
}
#[test]
fn bindgen_test_layout_e1000_buffer() {
    assert_eq!(
        ::std::mem::size_of::<e1000_buffer>(),
        48usize,
        concat!("Size of: ", stringify!(e1000_buffer))
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_buffer>(),
        8usize,
        concat!("Alignment of ", stringify!(e1000_buffer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_buffer>())).skb as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_buffer),
            "::",
            stringify!(skb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_buffer>())).dma as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_buffer),
            "::",
            stringify!(dma)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_buffer>())).page as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_buffer),
            "::",
            stringify!(page)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_buffer>())).time_stamp as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_buffer),
            "::",
            stringify!(time_stamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_buffer>())).length as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_buffer),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_buffer>())).next_to_watch as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_buffer),
            "::",
            stringify!(next_to_watch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_buffer>())).segs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_buffer),
            "::",
            stringify!(segs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_buffer>())).bytecount as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_buffer),
            "::",
            stringify!(bytecount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_buffer>())).mapped_as_page as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_buffer),
            "::",
            stringify!(mapped_as_page)
        )
    );
}

#[test]
fn bindgen_test_layout_e1000_tx_ring() {
    assert_eq!(
        ::std::mem::size_of::<e1000_tx_ring>(),
        48usize,
        concat!("Size of: ", stringify!(e1000_tx_ring))
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_tx_ring>(),
        8usize,
        concat!("Alignment of ", stringify!(e1000_tx_ring))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_tx_ring>())).desc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_tx_ring),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_tx_ring>())).dma as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_tx_ring),
            "::",
            stringify!(dma)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_tx_ring>())).size as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_tx_ring),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_tx_ring>())).count as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_tx_ring),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_tx_ring>())).next_to_use as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_tx_ring),
            "::",
            stringify!(next_to_use)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_tx_ring>())).next_to_clean as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_tx_ring),
            "::",
            stringify!(next_to_clean)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_tx_ring>())).buffer_info as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_tx_ring),
            "::",
            stringify!(buffer_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_tx_ring>())).tdh as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_tx_ring),
            "::",
            stringify!(tdh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_tx_ring>())).tdt as *const _ as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_tx_ring),
            "::",
            stringify!(tdt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_tx_ring>())).last_tx_tso as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_tx_ring),
            "::",
            stringify!(last_tx_tso)
        )
    );
}

#[test]
fn bindgen_test_layout_e1000_rx_ring() {
    assert_eq!(
        ::std::mem::size_of::<e1000_rx_ring>(),
        56usize,
        concat!("Size of: ", stringify!(e1000_rx_ring))
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_rx_ring>(),
        8usize,
        concat!("Alignment of ", stringify!(e1000_rx_ring))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_rx_ring>())).desc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_rx_ring),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_rx_ring>())).dma as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_rx_ring),
            "::",
            stringify!(dma)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_rx_ring>())).size as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_rx_ring),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_rx_ring>())).count as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_rx_ring),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_rx_ring>())).next_to_use as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_rx_ring),
            "::",
            stringify!(next_to_use)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_rx_ring>())).next_to_clean as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_rx_ring),
            "::",
            stringify!(next_to_clean)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_rx_ring>())).buffer_info as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_rx_ring),
            "::",
            stringify!(buffer_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_rx_ring>())).rx_skb_top as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_rx_ring),
            "::",
            stringify!(rx_skb_top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_rx_ring>())).cpu as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_rx_ring),
            "::",
            stringify!(cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_rx_ring>())).rdh as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_rx_ring),
            "::",
            stringify!(rdh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_rx_ring>())).rdt as *const _ as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_rx_ring),
            "::",
            stringify!(rdt)
        )
    );
}

#[test]
fn bindgen_test_layout_e1000_adapter() {
    assert_eq!(
        ::std::mem::size_of::<e1000_adapter>(),
        2584usize,
        concat!("Size of: ", stringify!(e1000_adapter))
    );
    assert_eq!(
        ::std::mem::align_of::<e1000_adapter>(),
        8usize,
        concat!("Alignment of ", stringify!(e1000_adapter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).active_vlans as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(active_vlans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).mng_vlan_id as *const _ as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(mng_vlan_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).bd_number as *const _ as usize },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(bd_number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).rx_buffer_len as *const _ as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(rx_buffer_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).wol as *const _ as usize },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(wol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).smartspeed as *const _ as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(smartspeed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).en_mng_pt as *const _ as usize },
        532usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(en_mng_pt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).link_speed as *const _ as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(link_speed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).link_duplex as *const _ as usize },
        538usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(link_duplex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).stats_lock as *const _ as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(stats_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).total_tx_bytes as *const _ as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(total_tx_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).total_tx_packets as *const _ as usize },
        596usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(total_tx_packets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).total_rx_bytes as *const _ as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(total_rx_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).total_rx_packets as *const _ as usize },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(total_rx_packets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).itr as *const _ as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(itr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).itr_setting as *const _ as usize },
        612usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(itr_setting)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).tx_itr as *const _ as usize },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(tx_itr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).rx_itr as *const _ as usize },
        618usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(rx_itr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).fc_autoneg as *const _ as usize },
        620usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(fc_autoneg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).tx_ring as *const _ as usize },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(tx_ring)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).restart_queue as *const _ as usize },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(restart_queue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).txd_cmd as *const _ as usize },
        636usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(txd_cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).tx_int_delay as *const _ as usize },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(tx_int_delay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).tx_abs_int_delay as *const _ as usize },
        644usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(tx_abs_int_delay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).gotcl as *const _ as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(gotcl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).gotcl_old as *const _ as usize },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(gotcl_old)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).tpt_old as *const _ as usize },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(tpt_old)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).colc_old as *const _ as usize },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(colc_old)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).tx_timeout_count as *const _ as usize },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(tx_timeout_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).tx_fifo_head as *const _ as usize },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(tx_fifo_head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).tx_head_addr as *const _ as usize },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(tx_head_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).tx_fifo_size as *const _ as usize },
        692usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(tx_fifo_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).tx_timeout_factor as *const _ as usize },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(tx_timeout_factor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).tx_fifo_stall as *const _ as usize },
        700usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(tx_fifo_stall)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).pcix_82544 as *const _ as usize },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(pcix_82544)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).detect_tx_hung as *const _ as usize },
        705usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(detect_tx_hung)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).dump_buffers as *const _ as usize },
        706usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(dump_buffers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).clean_rx as *const _ as usize },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(clean_rx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).alloc_rx_buf as *const _ as usize },
        720usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(alloc_rx_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).rx_ring as *const _ as usize },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(rx_ring)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).napi as *const _ as usize },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(napi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).num_tx_queues as *const _ as usize },
        1120usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(num_tx_queues)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).num_rx_queues as *const _ as usize },
        1124usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(num_rx_queues)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).hw_csum_err as *const _ as usize },
        1128usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(hw_csum_err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).hw_csum_good as *const _ as usize },
        1136usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(hw_csum_good)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<e1000_adapter>())).alloc_rx_buff_failed as *const _ as usize
        },
        1144usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(alloc_rx_buff_failed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).rx_int_delay as *const _ as usize },
        1148usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(rx_int_delay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).rx_abs_int_delay as *const _ as usize },
        1152usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(rx_abs_int_delay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).rx_csum as *const _ as usize },
        1156usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(rx_csum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).gorcl as *const _ as usize },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(gorcl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).gorcl_old as *const _ as usize },
        1168usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(gorcl_old)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).netdev as *const _ as usize },
        1176usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(netdev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).pdev as *const _ as usize },
        1184usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(pdev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).hw as *const _ as usize },
        1192usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(hw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).stats as *const _ as usize },
        1480usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(stats)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).phy_info as *const _ as usize },
        2032usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(phy_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).phy_stats as *const _ as usize },
        2064usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(phy_stats)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).test_icr as *const _ as usize },
        2072usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(test_icr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).test_tx_ring as *const _ as usize },
        2080usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(test_tx_ring)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).test_rx_ring as *const _ as usize },
        2128usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(test_rx_ring)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).msg_enable as *const _ as usize },
        2184usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(msg_enable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).tso_force as *const _ as usize },
        2188usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(tso_force)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).smart_power_down as *const _ as usize },
        2189usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(smart_power_down)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).quad_port_a as *const _ as usize },
        2190usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(quad_port_a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).flags as *const _ as usize },
        2192usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).eeprom_wol as *const _ as usize },
        2200usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(eeprom_wol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).bars as *const _ as usize },
        2204usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(bars)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).need_ioport as *const _ as usize },
        2208usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(need_ioport)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).discarding as *const _ as usize },
        2212usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(discarding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).reset_task as *const _ as usize },
        2216usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(reset_task)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).watchdog_task as *const _ as usize },
        2248usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(watchdog_task)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).fifo_stall_task as *const _ as usize },
        2336usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(fifo_stall_task)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).phy_info_task as *const _ as usize },
        2424usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(phy_info_task)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<e1000_adapter>())).mutex as *const _ as usize },
        2512usize,
        concat!(
            "Offset of field: ",
            stringify!(e1000_adapter),
            "::",
            stringify!(mutex)
        )
    );
}
pub const e1000_state_t___E1000_TESTING: e1000_state_t = 0;
pub const e1000_state_t___E1000_RESETTING: e1000_state_t = 1;
pub const e1000_state_t___E1000_DOWN: e1000_state_t = 2;
pub type e1000_state_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn e1000_get_hw_dev(hw: *mut e1000_hw) -> *mut net_device;
}
extern "C" {
    pub static mut e1000_driver_name: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e1000_driver_version: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn e1000_up(adapter: *mut e1000_adapter) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn e1000_down(adapter: *mut e1000_adapter);
}
extern "C" {
    pub fn e1000_reinit_locked(adapter: *mut e1000_adapter);
}
extern "C" {
    pub fn e1000_reset(adapter: *mut e1000_adapter);
}
extern "C" {
    pub fn e1000_set_spd_dplx(
        adapter: *mut e1000_adapter,
        spd: u32,
        dplx: u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn e1000_setup_all_rx_resources(adapter: *mut e1000_adapter) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn e1000_setup_all_tx_resources(adapter: *mut e1000_adapter) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn e1000_free_all_rx_resources(adapter: *mut e1000_adapter);
}
extern "C" {
    pub fn e1000_free_all_tx_resources(adapter: *mut e1000_adapter);
}
extern "C" {
    pub fn e1000_update_stats(adapter: *mut e1000_adapter);
}
extern "C" {
    pub fn e1000_has_link(adapter: *mut e1000_adapter) -> bool;
}
extern "C" {
    pub fn e1000_power_up_phy(arg1: *mut e1000_adapter);
}
extern "C" {
    pub fn e1000_set_ethtool_ops(netdev: *mut net_device);
}
extern "C" {
    pub fn e1000_check_options(adapter: *mut e1000_adapter);
}
extern "C" {
    pub fn e1000_get_hw_dev_name(hw: *mut e1000_hw) -> *mut ::std::os::raw::c_char;
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sk_buff {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct page {
    pub _address: u8,
}
